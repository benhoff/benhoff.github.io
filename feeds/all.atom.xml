<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben's Blog</title><link href="https://benhoff.net/" rel="alternate"></link><link href="https://benhoff.net/feeds/all.atom.xml" rel="self"></link><id>https://benhoff.net/</id><updated>2019-12-11T07:50:00-06:00</updated><entry><title>Tensorflow Serving is Dead</title><link href="https://benhoff.net/tensorflow-serving-dead.html" rel="alternate"></link><published>2019-12-11T07:50:00-06:00</published><updated>2019-12-11T07:50:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-12-11:/tensorflow-serving-dead.html</id><summary type="html">&lt;p&gt;Tensorflow Serving is Dead, or at least not being&amp;nbsp;maintained&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of my OpenCV &lt;span class="caps"&gt;CVAT&lt;/span&gt; development, one of the things that I want to focus on is making it easier to develop computer vision models within the platform. There&amp;#8217;s quite a few startups that are also working in this space, but the idea of crowdsourcing labeling/annotation in a single platform and then using that same platform to integrate and train a machine learning model, is powerful. It&amp;#8217;s the vision I was working towards with my last company, and still an interesting&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;As part of that vision, the &lt;span class="caps"&gt;CVAT&lt;/span&gt; platform needs to integrate in some of the top tier machine learning frameworks. &lt;span class="caps"&gt;CVAT&lt;/span&gt; has already integrated in OpenVINO (which is an Intel Deep Learning framework. Actually hilariously, OpenVINO is rebranded &lt;a href="https://github.com/opencv/dldt"&gt;&lt;span class="caps"&gt;DLDT&lt;/span&gt;&lt;/a&gt;). But the next obvious enterprise framework is&amp;nbsp;Tensorflow.&lt;/p&gt;
&lt;p&gt;One important thing from a systems perspective is to separate out your resources, so you don&amp;#8217;t risk breaking your entire system and you can scale different pieces at different rates. So the model integration really needed to be of the microservices brand. Enter stage left: Tensorflow&amp;nbsp;serving.&lt;/p&gt;
&lt;p&gt;Tensorflow serving dockerizes models and allows them to be served via &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; or gRPC. So you can have a fat &lt;span class="caps"&gt;GPU&lt;/span&gt; on a separate server from the &lt;span class="caps"&gt;CVAT&lt;/span&gt; instance, plugging away, training the best inference possible. This is perfect for &lt;span class="caps"&gt;CVAT&lt;/span&gt;&amp;#8217;s use&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only one slight hangup. Tensorflow has recently transitioned into Tensorflow 2.0, an &lt;span class="caps"&gt;API&lt;/span&gt; breaking upgrade. This has (as &lt;span class="caps"&gt;API&lt;/span&gt; breaks always do), thrown the entire ecosystem into chaos. But it has shown some light on an interesting&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Tensorflow Serving is Dead. Or at least, not being actively&amp;nbsp;maintained.&lt;/p&gt;
&lt;p&gt;See part of the upgrades to Tensorflow 2.0 was to remove the &lt;code&gt;contrib&lt;/code&gt; module, a top level module that used a very popular Tensorflow library known as Slim. This breaks Tensorflow Serving&amp;#8217;s examples. See &lt;a href="https://github.com/tensorflow/serving/issues/1475"&gt;here&lt;/a&gt;. No big deal though, software is flexible and can heal right? Well, only if you keep development resources on the project. Two perspective pull fixes, both &lt;a href="https://github.com/tensorflow/serving/pull/1477"&gt;one of mine&lt;/a&gt; and &lt;a href="https://github.com/tensorflow/serving/pull/1486"&gt;someone else&amp;#8217;s&lt;/a&gt; have gone unmerged or commented for 30+ days. The last pull request accepted was September 11th,&amp;nbsp;2019.&lt;/p&gt;
&lt;p&gt;So Tensorflow Serving is officially dead. Or at least unmaintained at this&amp;nbsp;point.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Encouraging Open Source Contributions</title><link href="https://benhoff.net/encouraging-open-source.html" rel="alternate"></link><published>2019-12-10T21:29:00-06:00</published><updated>2019-12-10T21:29:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-12-10:/encouraging-open-source.html</id><summary type="html">&lt;p&gt;Exploring methods for encouraging Open Source&amp;nbsp;commits&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been committing to OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;. This is for a couple of reasons. As I&amp;#8217;ve gotten into more management and sales positions, I found that I didn&amp;#8217;t have any reasons to keep my technical skills sharp. In fact, what I found with my last roles, is that by trying to commit to projects, I would often cause&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;My coworkers were not thrilled to find out that my code introduced bugs. They also couldn&amp;#8217;t count on me to be technically engaged, because the job pulled me in different directions. Me contributing to our tight turn project ended up being more of a distraction than a help, so I&amp;nbsp;stopped.&lt;/p&gt;
&lt;p&gt;So I set out to find a project that was related to the business space that we were in that I could work on while sharpening my technical skills. Specifically, at the time I was working for a custom services shop, and I was trying to push us to have a few computer vision &lt;span class="caps"&gt;AI&lt;/span&gt; projects. Thus we needed to have solid tools and experience to train the &lt;span class="caps"&gt;AI&lt;/span&gt; against. Bringing us back around to OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Part of what&amp;#8217;s interesting to me is building a community. So now that I&amp;#8217;ve got a few commits into &lt;span class="caps"&gt;CVAT&lt;/span&gt;, including some buggy ones, it&amp;#8217;s been interesting to me to see what works to help foster building a&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve already talked about &lt;a href="https://benhoff.net/paying-for-open-source.html"&gt;trying to pay for open source contributions&lt;/a&gt;. However I&amp;#8217;ve yet to see any traction with that&amp;nbsp;method.&lt;/p&gt;
&lt;p&gt;One thing I do know, is that when people run into problems or have bugs, they are &lt;span class="caps"&gt;HIGHLY&lt;/span&gt; motivated to contribute. Sometimes challenging them to do so is enough to get them started (&lt;a href="https://github.com/opencv/cvat/issues/501#issuecomment-503149106"&gt;it certainly worked on me&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had some limited success with throwing out some high level ideas, linked to code to get successful code submissions. I think this is a decent practice depending on your familiarity with the code and the technical prowess of your consumers. Diagnosing and providing some ideas of how to fix stuff is often easy. It&amp;#8217;s testing and iterating through the solution that becomes&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;So if you are running a similar project, that&amp;#8217;s my suggestion. Challenge people, and if they run into a specific problem, throw them a couple of&amp;nbsp;breadcrumbs.&lt;/p&gt;
&lt;p&gt;You never know who might become a regular contributor to your project this&amp;nbsp;way!&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Integrating QCamera and QAbstractVideoSurface Together</title><link href="https://benhoff.net/qcamera-and-qabstractvideosurface.html" rel="alternate"></link><published>2019-12-10T20:28:00-06:00</published><updated>2019-12-10T20:28:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-12-10:/qcamera-and-qabstractvideosurface.html</id><summary type="html">&lt;p&gt;Working with a new client to integrate video and desktop&amp;nbsp;together&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a client approach me about doing a webcam integration user interface, which was great! I&amp;#8217;ve been looking (&lt;span class="caps"&gt;ITCHING&lt;/span&gt;) for a reason to play with Qt&amp;#8217;s video stack&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;Specifically the last time I left off with my explorations with Qt, I really wanted to integrate an Augmented Reality demo together with a webcamera. I wanted to integrate it with the Qt3D framework to show off the ability to integrate it all. I never could figure out how to do it (see &lt;a href="https://stackoverflow.com/questions/50291828/how-to-display-an-image-in-qt3d"&gt;this Stackoverflow question&lt;/a&gt;), but that doesn&amp;#8217;t mean I had given up the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Being technology greedy, I was also interested in learning how Qt&amp;#8217; QVideoFilter classes worked (see &lt;a href="https://doc.qt.io/qt-5/qvideofilterrunnable.html"&gt;here&lt;/a&gt;), to create a snapchat&amp;nbsp;clone.&lt;/p&gt;
&lt;p&gt;So you know, Augmented Reality, Snapchat, webcam-driven &lt;span class="caps"&gt;QML&lt;/span&gt; application. Just a casual Tuesday for me&amp;nbsp;really.&lt;/p&gt;
&lt;p&gt;However I ran into issues getting to the data (and getting Qt3D to display an image as noted&amp;nbsp;above).&lt;/p&gt;
&lt;p&gt;So when the client approached me to do an Qt and OpenCV integration, I knew I would finally have my chance to conquer Qt&amp;#8217;s QCamera&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;Which is exactly what I&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;So the QCamera class has a &lt;code&gt;setViewfinder&lt;/code&gt; method, where you can set an interface that can work with the raw data. In levels of concereteness to abstraction, the available classes are &lt;code&gt;QVideoWidget&lt;/code&gt;, &lt;code&gt;QCameraViefinder&lt;/code&gt; and &lt;code&gt;QAbstractVideoSurface&lt;/code&gt;. QVideoWidget is a fully featured widget, whereas &lt;code&gt;QAbstractVideoSurface&lt;/code&gt; is the abstract version ready to be subclassed and&amp;nbsp;implemented.&lt;/p&gt;
&lt;p&gt;When you dig through the source code for the more concrete classes, you get exposed to a lot of raw OpenGL. Having done some OpenGL programming before, I kind of know OpenGL, but I&amp;#8217;m no expert. Additionally, it&amp;#8217;s not anything I wanted to introduce into the class I was teaching at the time. So I kind of punted on the whole&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Creating a video course takes a lot of time, and I had to abandon any ideas that were too complex for my time frame. I couldn&amp;#8217;t figure out if the OpenGL implementation made the program significantly more robust, because I couldn&amp;#8217;t figure out if &lt;span class="caps"&gt;NOT&lt;/span&gt; implementing the program as OpenGL, would force me to download the data out of video memory and push it back up into video memory (a significant battery drainer for a mobile application). I don&amp;#8217;t think that is the case, but I didn&amp;#8217;t have time to explore. Luckily for this particular client, everything was on Desktop, so I didn&amp;#8217;t need to worry about the specific battery&amp;nbsp;constraints.&lt;/p&gt;
&lt;p&gt;In order to implement QAbstractVideoSurface, you have to override/implement two methods: &lt;code&gt;supportedPixelFormats&lt;/code&gt; and &lt;code&gt;present&lt;/code&gt;. In the &lt;code&gt;supportedPixelFormats&lt;/code&gt; method, you describe to the rest of the framework which types of QVideoFrame data formats that your implementation can support. My understanding is, if the data comes in a format that you don&amp;#8217;t explicitly authorize, then the Qt framework uses the underlying system to convert the data into the format that you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Again, running on desktop and for a &lt;span class="caps"&gt;MVP&lt;/span&gt;, this wasn&amp;#8217;t a big concern for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Instead, I wanted the system to handle as much of the conversion as possible, so I only exposed a single video format, &lt;span class="caps"&gt;RGB32&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VideoSurface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QAbstractVideoSurface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;supportedPixelFormats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handle_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QAbstractVideoBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVideoFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format_RGB32&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This leaves only the &lt;code&gt;present&lt;/code&gt; method. Present is where you actually handle the video data. I wanted to convert the video data into a format that I can use for the rest of my&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;I still find the image data types in Qt to be slightly confusing (I always have to look them up). Broadly though, I use primarily either QImage or QPixmap. I know QPixmap is to be used for display images, and I still wanted to manipulate my image, so I settled on QImage. So I had to convert my QVideoFrame to a QImage. Easy&amp;nbsp;enough.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# class VideoSurface(QtMultimedia.QAbstractVideoSurface):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVideoFrame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVideoFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QAbstractVideoBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadOnly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;image_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVideoFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageFormatFromPixelFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixelFormat&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="n"&gt;my_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bytesPerLine&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_format&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unmap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# Do something with your new `QImage` here!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I finally had what I wanted all that time ago! A simple example of low level access out of a QCamera. The only thing to do is wire it up to a&amp;nbsp;QCamera&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtMultimedia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;video_surface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VideoSurface&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setViewfinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_surface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="PyQt"></category></entry><entry><title>Paying for Open Source</title><link href="https://benhoff.net/paying-for-open-source.html" rel="alternate"></link><published>2019-11-26T06:40:00-06:00</published><updated>2019-11-26T06:40:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-26:/paying-for-open-source.html</id><summary type="html">&lt;p&gt;Exploring methods for promoting Open&amp;nbsp;Source&lt;/p&gt;</summary><content type="html">&lt;p&gt;I think the first time I saw an Open Source project that was well funded and was using that funding to promote development was NeoVim. NeoVim was a fork of the popular Vim project, focused on reducing the cruft of the project and bringing best practices back in. Whoever was running the project was a marketing genius. He got a ton of press outlining the issues with the Vim project. But the key difference between him and a thousand of other people complaining about projects is that he launched an alternative &lt;em&gt;and asked for money&lt;/em&gt;. This is how I got introduced to &lt;a href="https://www.bountysource.com/"&gt;BountySource&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The BountySource idea is simple. Give money against (typically) GitHub issues to promote development for fixes. Bounties can be pooled so that interested individuals can pool money together. Some of the bounties are quite large, in the $5K realm and &lt;span class="caps"&gt;IBM&lt;/span&gt; has awarded $470,000+ dollars on the platform. Now these two data points are by far the outliers. The platform itself hasn&amp;#8217;t really caught on in a substantial way. There are 5-8 projects in the $5K realm which are deeply technical lifts, and the next largest businesses are Ripple coin and Elementary with $37K and $27K&amp;nbsp;respectively.&lt;/p&gt;
&lt;p&gt;NeoVim itself looks like it&amp;#8217;s focused on funding an individual developer or project maintenance over funding individual issues. I seem to remember in the early days that they were funding individual issues. I&amp;#8217;m guessing the lag between putting money down and actual implementations was too large. Especially for bug fixes, this seems like an unwise&amp;nbsp;strategy.&lt;/p&gt;
&lt;p&gt;For my own personal use, I&amp;#8217;ve been interested in throwing some small cash sums around to get a feel for different approaches. My pet project lately has been &lt;a href="https://benhoff.net/developing-cvat.html"&gt;OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;&lt;/a&gt;. Because &lt;span class="caps"&gt;CVAT&lt;/span&gt; has been blending in Machine Learning into the user interface, it&amp;#8217;s a cool sell. You can show people the platform itself and the neat things it can&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;I wanted to continue to increase the magicalness of the platform, so I put &lt;a href="https://www.bountysource.com/issues/70724425-intelligent-scissors"&gt;$100 on BountySource&lt;/a&gt; against some &lt;a href="https://github.com/opencv/cvat/issues/336"&gt;intelligent scissors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nobody has bitten off on the project. I&amp;#8217;m guessing there&amp;#8217;s a couple of issues, one of which is that the dollar value is low for the platform. The other of which is I haven&amp;#8217;t done any marketing. BountySource doesn&amp;#8217;t seem like a large enough of a platform to drive implementations for that low of a price point. And at least for United States development labor, the cost is probably a bit low. I would guess that patch would take somewhere between 4-32 hours to implement, depending on the developer. That&amp;#8217;s probably not costing time for setting up a development environment with a new project. Assuming $50/hour, it&amp;#8217;s quick to see the price&amp;nbsp;delta.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Visual Debugging from the Command Line</title><link href="https://benhoff.net/command-line-visual-debugging.html" rel="alternate"></link><published>2019-11-24T22:39:00-06:00</published><updated>2019-11-24T22:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-24:/command-line-visual-debugging.html</id><summary type="html">&lt;p&gt;How to visually debug something from the command&amp;nbsp;line&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working with images is interesting. In a previous piece of work, a customer wanted to bring in some semantic segmentation. Semantic Segmentation goes pixel by pixel and assigns probabilities that the pixel belongs to label. You&amp;#8217;ll typically see this in street images, with individual cars, people, bikes, etc being segmented out of the overall picture on a pixel&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;The interesting problem of working with semantic segmentation technologies is working with the outputs. Typically the output of a semantic segmentation model is a list of pixel probabilities. Because it&amp;#8217;s a pixel-by-pixel technology, you end up with probabilities for every single pixel in an image. Combine that with an estimation for each type of class that a pixel can be, and every pixel in an 800 x 600 image suddenly has 50 probabilities associated with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;(There&amp;#8217;s some tech where they use the bounding box to limit the number of pixels passed back (Mask &lt;span class="caps"&gt;RCNN&lt;/span&gt;), but it&amp;#8217;s still a lot of data to work&amp;nbsp;with.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure I&amp;#8217;ve ever figured out a good way to work with multi-layered array data like that contained within pictures. Leave a comment below if you have any&amp;nbsp;hints.&lt;/p&gt;
&lt;p&gt;Since I was working with images though, the nice thing is that you can just, you know, &lt;em&gt;display&lt;/em&gt; the images. After much trail and error, that was the best way I could figure out how to actually iteratively develop semantic segmentation&amp;nbsp;code. &lt;/p&gt;
&lt;p&gt;Interestingly, I&amp;#8217;ve never much cared for how OpenCv handles windows until&amp;nbsp;know.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that `some_numpy_array` is just that, a numpy array&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize the array or image&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My Array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# wait until user presses keys&lt;/span&gt;
&lt;span class="c1"&gt;# Note that without this waitkeys, the window will be created and destroyed before you can notice it&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Do some kind of manipulation here or you could show another picture to compare&lt;/span&gt;
&lt;span class="n"&gt;some_numpy_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_some_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize the array or image again after the changes&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My Array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method cv2.destroyAllWindows() or cv2.destroyWindow(&amp;#8216;your-name-here&amp;#8217;) might be useful depending on the specifics of what you have to visualize. I just reused the existing context/window, but there might be cases where you&amp;#8217;d want to display multiple windows side-by-side or some other&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;This was a funny setup because I was actually building some server code. So as I was debugging, my web server started spitting some Desktop Graphical User Interfaces. While none of this code made it into production, it definitely helped me track down the logic errors in my code and get the result &lt;a href="https://github.com/opencv/cvat/commit/a435b410ede92130ca2bc67a7ae2a60962f6ebef"&gt;submitted up and working correctly&lt;/a&gt;.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Developing OpenCV’s CVAT</title><link href="https://benhoff.net/developing-cvat.html" rel="alternate"></link><published>2019-11-24T21:39:00-06:00</published><updated>2019-11-24T21:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-24:/developing-cvat.html</id><summary type="html">&lt;p&gt;Summarizing my work up to date with &lt;span class="caps"&gt;CVAT&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of a work project, I needed to showcase off some computer vision (specifically, semantic segmentation) capabilities. The client needed to be able to understand both what was technically possibly, but also feel comfortable that it was mature enough to be put into production. I&amp;#8217;ve found that finding open source projects that are being driven by big name players typically gives the required comfort to customers that the tech is mature. Additionally, having a sweet looking and usable user interface that you can drop in to the project day 1 is also very&amp;nbsp;helpful.&lt;/p&gt;
&lt;p&gt;Enter &lt;span class="caps"&gt;CVAT&lt;/span&gt;. Intel has recently been trying to flex it&amp;#8217;s muscle in the deep learning space, making up for the early lead that &lt;span class="caps"&gt;NVIDIA&lt;/span&gt; has taken with &lt;span class="caps"&gt;CUDA&lt;/span&gt;. Intel&amp;#8217;s approach has been an open source one, leading with a suite of deep learning technologies. I&amp;#8217;m a little ignorant on the total depth of all the total tools, but I am now very familiar with &lt;span class="caps"&gt;CVAT&lt;/span&gt; and OpenVINO tool&amp;nbsp;suites.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CVAT&lt;/span&gt; is an image annotation platform to be used for training machine learning models. While most image annotation labor is cheap (literally drawing boxes on a static image), there&amp;#8217;s always a desire to leverage existing work to increase the accuracy, speed, and reduce costs in annotation&amp;nbsp;labor.&lt;/p&gt;
&lt;p&gt;To do this, &lt;span class="caps"&gt;CVAT&lt;/span&gt; integrates open source pretrained models to act as &amp;#8220;first-pass&amp;#8221; annotators using the OpenVINO&amp;nbsp;toolkit.&lt;/p&gt;
&lt;p&gt;OpenVINO is an abstracting layer between multiple toolkits, allowing one to use both PyTorch, &lt;span class="caps"&gt;ONNX&lt;/span&gt;, and Tensorflow models in a uniform way. (There&amp;#8217;s also some optimizations it uses to abstract between &lt;span class="caps"&gt;CPU&lt;/span&gt; and &lt;span class="caps"&gt;GPU&lt;/span&gt; power, but that&amp;#8217;s less important for this use&amp;nbsp;case).&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CVAT&lt;/span&gt; was perfect for my needs. Someone else had already built the user interface, I just needed to customize a bit of the OpenVINO code base to showcase what was possible for my client. Well, that was the&amp;nbsp;theory.&lt;/p&gt;
&lt;p&gt;In reality, the integration between the web server and the deep learning hadn&amp;#8217;t had much main stream development support. So while what I wanted to do was theoretically easy, it actually took significant development support to make it&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;In addition to a few bugs that had to be fixed, the biggest technical contributions I had to do, were quite  odd. Users were required to submit Python scripts to process the results of each model back into a format that &lt;span class="caps"&gt;CVAT&lt;/span&gt; understood. The architects of the code that I was using had set up a limited python sandbox to process this user submitted code. When I first started, there was no way for a user to get the full power of the python language , even if you were an admin. This was obviously not going to work for me. So the first thing I did was fix that. &lt;a href="https://github.com/opencv/cvat/commit/f20698921e5355a4b13c4f90612163f56b9835d0"&gt;I added a flag to check if a user was a admin or not and gave them the capability to run all of python if they were an admin&lt;/a&gt;. That fixed the majority of my issues, but I still didn&amp;#8217;t have the full power of Python behind me. Because Python&amp;#8217;s eval does not actually process import&amp;nbsp;statements.&lt;/p&gt;
&lt;p&gt;So the second thing I had to do was add in the capability to import code in these user-submitted scripts. In order to do that, I would have to programmatically assess and import the required packages before running the &amp;#8220;eval&amp;#8221;&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;I originally thought that setting up this process was going to be too difficult. However, I did remember that Python has actually exposed a significant amount of it&amp;#8217;s code processing in the standard library, and that gave me hope. With the help of a &lt;a href="https://stackoverflow.com/questions/9008451/python-easy-way-to-read-all-import-statements-from-py-module"&gt;StackOverflow question&lt;/a&gt;, I found out that I could indeed quickly parse out the import statements using Python&amp;#8217;s &amp;#8220;ast&amp;#8221; library. The only thing left to do was to &lt;a href="https://github.com/opencv/cvat/commit/418cdbe1464a06d5d7b26e6385586a2e5cfa12a5"&gt;parse the import statements and dynamically import the code, before evaluating the code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most technically impressive peace of this actually ended up being the easiest due to the above linked StackOverflow question (minus the research to get there). Tracing through the code base to manually ensure admin checks were put in place (my first patch) took significantly to ensure everything was in correctly. Grokking code completely and dealing with permissions is difficult, and will always probably&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;However, with the capability to showcase off semantic segmentation in a fully featured web interface, my customer was convinced of the readiness of the technology. Sadly, I left the company before I was able to get the contract in place. I did have a lot of fun building out the&amp;nbsp;tech!&lt;/p&gt;</content><category term="CVAT"></category></entry><entry><title>Rescuing the Blog</title><link href="https://benhoff.net/rescuing-the-blog.html" rel="alternate"></link><published>2019-11-22T21:39:00-06:00</published><updated>2019-11-22T21:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-22:/rescuing-the-blog.html</id><summary type="html">&lt;p&gt;Getting a project running that I haven&amp;#8217;t touched in&amp;nbsp;awhile&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven&amp;#8217;t blogged in awhile! While I&amp;#8217;ve been keeping up the discourse that&amp;#8217;s attached to the site, the actual blog itself is a different story. The static nature of the site helps keep it maintained, because I don&amp;#8217;t actually have to touch it, until I want to add new&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;One thing that I noticed right away is that I&amp;#8217;ve switched to using Markdown over Restructed text. This is because Github uses Markdown. So this article is being written using Markdown instead of &lt;span class="caps"&gt;RST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The other thing I&amp;#8217;ve learned is that I need to keep idiot proof instructions for how to stand this thing back up after I&amp;#8217;ve been away for awhile. It&amp;#8217;s funny how when you have side projects, the first thing that you notice is that you need a &amp;#8220;look at this stupid!&amp;#8221; text blob for remembering how to get things running&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;My instructions for this project are awful. I&amp;#8217;ve added some updates to remind myself. I was surprised on a fresh install that all the dependencies seem to be working after two years! It seems that chooosing Pelican was a smart&amp;nbsp;choice.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s see if we can&amp;#8217;t push these two articles up and close the&amp;nbsp;loop.&lt;/p&gt;
&lt;p&gt;If I remember the most difficult part with the entire process, it&amp;#8217;s actually in the pushing of the&amp;nbsp;content.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Python Extra Requires Woes</title><link href="https://benhoff.net/python-extras-requires.html" rel="alternate"></link><published>2019-11-21T21:39:00-06:00</published><updated>2019-11-21T21:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-21:/python-extras-requires.html</id><summary type="html">&lt;p&gt;Installing extras when running&amp;nbsp;setup.py&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the small things that I always forget or abuse in projects is &amp;#8220;extras_requires&amp;#8221;. In python project &amp;#8220;setup.py&amp;#8221; file, you can drop small hints, or tier out the installation requirements so that users don&amp;#8217;t have to download every single dependency in the world to get your project running. This is achieved by the use of&amp;nbsp;&amp;#8220;extras_requires&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The problem is, I never remember how to install the extras when using my desired installation method&amp;nbsp;of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py develop&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently the only way I know how to do it is to do a &amp;#8220;pip install -e .[my-extras-here]&amp;#8221;. I would like to be able to define the extras requires during development install. I&amp;#8217;ve opened a &lt;a href="https://stackoverflow.com/questions/58986867/use-python-setup-py-to-install-different-dependencies-with-develop-vs-install"&gt;Stackoverflow question&lt;/a&gt; to find out if it&amp;#8217;s possible. But based on some research, I don&amp;#8217;t think there is any way to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll just change the project for now to include all the dependencies for my desired use case. I think the use of &amp;#8220;extras_requires&amp;#8221; for most of my personal projects is probably an&amp;nbsp;anti-pattern.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Using Git Branches With Setuptools</title><link href="https://benhoff.net/using-git-branches-with-setuptools.html" rel="alternate"></link><published>2017-12-28T00:00:00-06:00</published><updated>2017-12-28T00:00:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-12-28:/using-git-branches-with-setuptools.html</id><summary type="html">&lt;p class="first last"&gt;Want to specify a git dependency in a setup.py? Here&amp;#8217;s&amp;nbsp;how.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I wanted to add a git branch in a dependency for a project of mine in the &lt;cite&gt;setup.py&lt;/cite&gt; file. Should be easy&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Several hours of research later and pinging a project maintainer to bump the version in his branch&amp;nbsp;later&amp;#8230;&lt;/p&gt;
&lt;p&gt;And it&amp;#8217;s actual not too bad once you know how to do it. So let&amp;#8217;s figure out how to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In the &lt;cite&gt;setup&lt;/cite&gt; method of &lt;cite&gt;setup.py&lt;/cite&gt; you need to have two&amp;nbsp;arguments.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install_requires&lt;/li&gt;
&lt;li&gt;dependency_links&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, I was trying to add the &lt;a class="reference external" href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt; 2.0.0 branch to my project (Version 1.0.15 is currently in&amp;nbsp;pypi).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s pick the easy one first, the&amp;nbsp;install_requires.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prompt-toolkit&amp;gt;=2.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This requirement parsing will currently fail due to the fact there isn&amp;#8217;t a prompt-toolkit version greater than or equal to 2.0.0 in pypi. So let&amp;#8217;s fix that by specifying the 2.0.0 branch with in the dependency&amp;nbsp;links.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependency_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git+https://github.com/jonathanslenders/python-prompt-toolkit@2.0#egg=prompt-toolkit-2.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#8217;s a couple of special things about the way this link is written that are poorly documented, and thus worth writing&amp;nbsp;about.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;cite&gt;git+https://github.com/jonathanslenders/python-prompt-toolkit&lt;/cite&gt; -&amp;gt; Standard documented way to install git links using pip. Nothing to see here, just an &lt;span class="caps"&gt;FYI&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;&amp;#64;2.0&lt;/cite&gt; specifies the branch that we want to use. Note that this happens to be a number in this case, but can be whatever branch you need. I.e., &lt;cite&gt;dev&lt;/cite&gt; would be a common interesting branch name that could be used by specifying &lt;cite&gt;&amp;#64;dev&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;#egg=prompt-toolkit-2.0.0&lt;/cite&gt; is the most important bit and worth expounding on a little&amp;nbsp;more.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We need to specify which package this dependency link provides. We do this with the &lt;cite&gt;#egg=PACKAGE_NAME&lt;/cite&gt; syntax. In this case, this dependency link provides the package &lt;cite&gt;prompt-toolkit&lt;/cite&gt;, ie &lt;cite&gt;#egg=prompt-toolkit&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;But the most important part of this portion of a dependency link, and one that isn&amp;#8217;t documented at all, is that you &lt;em&gt;must&lt;/em&gt; provide a version number. I&amp;#8217;ve done this here with the &lt;cite&gt;-2.0.0&lt;/cite&gt;. The version number you provide can be any version, but it must be&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;So for example, if you wanted to specify a dependency on the development version of Vexbot, the dependency link could look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependency_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git+https://github.com/benhoff/vexbot@dev#egg=vexbot-0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;cite&gt;-0&lt;/cite&gt; specifying the version number at the end of the vexbot dependency&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;You can throw in whatever version number you&amp;#8217;d like so that you can help properly guide your user as to what version you really need (like I did with the &lt;cite&gt;install_requires&lt;/cite&gt; constraint on&amp;nbsp;prompt-toolkit).&lt;/p&gt;
&lt;p&gt;Please note that dependency links are useful! You can use them&amp;nbsp;to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Specify a private git repository as a dependency in&amp;nbsp;setup.py&lt;/li&gt;
&lt;li&gt;Specify a patch version of a repository over the package in&amp;nbsp;pypi&lt;/li&gt;
&lt;li&gt;Specify a package that isn&amp;#8217;t published to pypi but is on&amp;nbsp;Github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope that&amp;nbsp;helps!&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Self Hosted Python Anywhere</title><link href="https://benhoff.net/local-python-anywhere.html" rel="alternate"></link><published>2017-10-16T07:22:00-05:00</published><updated>2017-10-16T07:22:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-16:/local-python-anywhere.html</id><summary type="html">&lt;p class="first last"&gt;Working around aggressive workplace&amp;nbsp;firewalls&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I have a great job, but it doesn&amp;#8217;t always fully employ me. Such is life. I still like to be productive, and having a programming hobbies and an office job seems like a match made in&amp;nbsp;heaven.&lt;/p&gt;
&lt;p&gt;Oh, you don&amp;#8217;t have enough things for me to do? But you still want me to be here in case something comes up? No worries team, I gotcha. Totally self&amp;nbsp;entertaining.&lt;/p&gt;
&lt;p&gt;The problem has been that my office&amp;#8217;s aggressive firewall has prevented me from doing anything that doesn&amp;#8217;t come over port 80 or 443. Which I totally get. But c&amp;#8217;mon man. I can only read Reddit so many hours of the&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;But then I found &lt;a class="reference external" href="https://www.pythonanywhere.com/"&gt;Python Anywhere&lt;/a&gt;. The basic premise is that all you need is a web browser and you can be up and coding in no time. I immediately signed up. This was exactly what I was looking for! Up until the point I realized that I can&amp;#8217;t bind to ports. With my main project using zmq, which requires binding to ports, I was super&amp;nbsp;bummed.&lt;/p&gt;
&lt;p&gt;It did however get me thinking that maybe I could use the same program. They had a full fledged terminal in the browser! There was no way that the website author made that program himself. It was too slick. It had to be open&amp;nbsp;sourced.&lt;/p&gt;
&lt;p&gt;After lots of googling I found it. &lt;a class="reference external" href="https://github.com/macton/hterm"&gt;hterm&lt;/a&gt;, the xterm-compatible terminal emulator. A terminal emulator itself didn&amp;#8217;t help me though. I need to have it hosted and hooked into a server somewhere. Enter &lt;a class="reference external" href="https://github.com/krishnasrinivas/wetty"&gt;wetty&lt;/a&gt;, the full bound&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;So now that I had a terminal as a service, I still needed to work with my office&amp;#8217;s firewall. Luckily for me, I have this blog. Or more specifically, I have the comments of the blog that I&amp;#8217;m hosting myself using nginx. Using a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt; feature in nginx, I was able to link up my new &amp;#8216;terminal as a service&amp;#8217; to the ip address of my blog comments which has already been white listed in my organizations&amp;nbsp;firewall.&lt;/p&gt;
&lt;p&gt;Sweet. My organization gets a much more motivated/attentive employee during lull periods and I get to be more productive.&amp;nbsp;Win-win.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Dealing with Deeply Nested Data Structures</title><link href="https://benhoff.net/interactive-debugging-methods.html" rel="alternate"></link><published>2017-10-05T10:24:00-05:00</published><updated>2017-10-05T10:24:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-05:/interactive-debugging-methods.html</id><summary type="html">&lt;p class="first last"&gt;Showcasing a neat way to explore deeply nested data&amp;nbsp;structures&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Working with deeply nested data structures is a pain. Sometimes the easiest way to figure out the control structure to get the data that you want is to play around with the data the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;. My problem is comes from an &lt;span class="caps"&gt;API&lt;/span&gt;, it&amp;#8217;s a pain to figure out how to quickly evaluate the structure, make lasting changes to the script, and then jump back into figuring out the structure. In the past, I&amp;#8217;ve sucked it up and used the &lt;span class="caps"&gt;REPL&lt;/span&gt;, I&amp;#8217;ve written scripts and eval&amp;#8217;d integrated the data one change at a time using &lt;cite&gt;print&lt;/cite&gt;, and occasionally, I&amp;#8217;ll use jupyter-notebook. None of these solutions seemed to be very good&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I still haven&amp;#8217;t figured out a great way, but yesterday when working with json data from Reddit, the thought occurred to me that I might be able to jump straight into the &lt;span class="caps"&gt;REPL&lt;/span&gt; and just pass in the scope that I was working in. I&amp;#8217;d seen this done in the &lt;a class="reference external" href="https://github.com/gawel/irc3"&gt;irc3&lt;/a&gt; code, but I couldn&amp;#8217;t figure out how that would be useful at the high level that it was done at (basically interrogating the final &lt;cite&gt;bot&lt;/cite&gt; instance).&lt;/p&gt;
&lt;p&gt;Sure enough, you can definitely do it. Using the &lt;cite&gt;interact&lt;/cite&gt; method from the &lt;cite&gt;code&lt;/cite&gt; module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;code&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interact&lt;/span&gt;


&lt;span class="c1"&gt;# some expensive calls here to get....&lt;/span&gt;
&lt;span class="c1"&gt;# ...a deeply nested data structures&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{}],&lt;/span&gt; &lt;span class="p"&gt;[{},&lt;/span&gt; &lt;span class="p"&gt;{}],&lt;/span&gt; &lt;span class="p"&gt;[{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{}]]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;deeper_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dropping into the &lt;span class="caps"&gt;REPL&lt;/span&gt; like this gives me the ability to query &lt;cite&gt;deeper_value&lt;/cite&gt; interactively. This is often useful when dealing with &lt;span class="caps"&gt;JSON&lt;/span&gt; to figure out what keys are&amp;nbsp;available.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Creating a Bot that Quotes Pop Culture in Context</title><link href="https://benhoff.net/movie-quotes-in-context.html" rel="alternate"></link><published>2017-10-04T06:15:00-05:00</published><updated>2017-10-04T06:15:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-04:/movie-quotes-in-context.html</id><summary type="html">&lt;p class="first last"&gt;Working with Reddit comments and machine learning to get movie quote&amp;nbsp;context&lt;/p&gt;
</summary><content type="html">&lt;p&gt;So I&amp;#8217;m interested in creating a bot that could quote movie quotes back to your in a context that makes sense. I don&amp;#8217;t know how your conversations with your buddies go, but 70% of our everyday conversation is quoting things in new and different contexts, so I was interested to see if I could collect enough data to do this with some common&amp;nbsp;quotes.&lt;/p&gt;
&lt;p&gt;The first part of any good machine learning project is to collect data. I read &lt;a class="reference external" href="http://www.zmescience.com/science/reddit-supercomp-59815/"&gt;that OpenAI was using Reddit comments&lt;/a&gt; to learn language, so I figured I&amp;#8217;d use Reddit as a source. Live data seemed to be the most interesting way to pull data&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;The problem is that I&amp;#8217;ve vastly overestimated (apparently) how much people quote famous movie quotes. I left the program running overnight and instead of having 100&amp;#8217;s of matches, I only had one. So I&amp;#8217;ll have to figure out a different way to get data&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;From a technology standpoint, this was a relatively easy problem to solve. I&amp;#8217;m using &lt;a class="reference external" href="https://praw.readthedocs.io/en/latest/"&gt;&lt;span class="caps"&gt;PRAW&lt;/span&gt;&lt;/a&gt;, the Python Reddit &lt;span class="caps"&gt;API&lt;/span&gt; wrapper to get comments out. I wanted some flexibility for spelling, so I ended up using the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein algorithim&lt;/a&gt; from the &lt;a class="reference external" href="https://github.com/ztane/python-Levenshtein/"&gt;python-Levenshtien&lt;/a&gt; package. There&amp;#8217;s probably a better algo to do this, see &lt;a class="reference external" href="https://stackoverflow.com/questions/3338889/how-to-find-similar-results-and-sort-by-similarity"&gt;this stackoverflow post&lt;/a&gt; about that issue, but Levenshtien was good enough for a proof of&amp;nbsp;concept.&lt;/p&gt;
&lt;p&gt;The plan was to grab all of the parent comment&amp;#8217;s text if there was a match that was good close to any of the my movie quotes. But like I said, there&amp;#8217;s not enough data being returned from grabbing live comments to make this&amp;nbsp;feasible.&lt;/p&gt;
&lt;p&gt;I ran this in tmux on a digital ocean instance I have running for 12 hours. You could also have this write to a file as well. I turned off the similarity matching and have just been watching the raw text come in while I write this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Man, that &amp;#8216;Remind me!&amp;#8217; bot is&amp;nbsp;popular.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;praw&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Levenshtein&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;client_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# quotes is a list of string&lt;/span&gt;
&lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;USER_AGENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Movie Quote Bot by /u/beohoff&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reddit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;praw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reddit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;USER_AGENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greatest_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;greatest_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;least_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;least_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subreddit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AskReddit+movies+funny+pics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greatest_length&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;least_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;greatest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;best_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Guess it&amp;#8217;s back to the drawing board for how to get enough data to create a bot that can respond in context with movie&amp;nbsp;quotes.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>PyQt Signals and Slots</title><link href="https://benhoff.net/pyqt-signals-slots.html" rel="alternate"></link><published>2017-07-21T07:40:00-05:00</published><updated>2017-07-21T07:40:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-21:/pyqt-signals-slots.html</id><summary type="html">&lt;p class="first last"&gt;Figuring out how to use signals and&amp;nbsp;slots&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As part of our &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;PyQt Tutorial series&lt;/a&gt;, we&amp;#8217;ve gone through some basic &lt;a class="reference external" href="https://benhoff.net/pyqt-layout-design.rst"&gt;layout management&lt;/a&gt; in addition to a conversation about some &lt;a class="reference external" href="https://benhoff.net/qt-interface-design.rst"&gt;interface design&lt;/a&gt;&amp;#8230; but now when I click buttons I want things to&amp;nbsp;happen!&lt;/p&gt;
&lt;p&gt;In order to achieve that goal, we&amp;#8217;re going to have to learn about signals and&amp;nbsp;slots.&lt;/p&gt;
&lt;p&gt;Let me let you in on a little secret. Signals and slots? They&amp;#8217;re magical. Seriously, they are pretty&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go back to our face recognition example. If you&amp;#8217;re jumping around, you can catch up to the source code that we&amp;#8217;re starting at &lt;a class="reference external" href="https://github.com/benhoff/blog/blob/master/scripts/pyqt-layout-design.py"&gt;here&lt;/a&gt;. This time, since we know layouts due to the &lt;a class="reference external" href="https://benhoff.net/pyqt-layout-design.rst"&gt;layout management&lt;/a&gt; post, we&amp;#8217;re going to build our own widget so that we can better hook up our signals and&amp;nbsp;slots.&lt;/p&gt;
&lt;p&gt;This is going to track closely to the &lt;a class="reference external" href="https://benhoff.net/face-detection-in-pyqt.rst"&gt;face detection post&lt;/a&gt; where I originally created this&amp;nbsp;widget.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;facerecog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceRecogControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;haar_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detect_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video_recording&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="n"&gt;record_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Qtwidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detect_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record_button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll notice that in the code above, I didn&amp;#8217;t put the &lt;tt class="docutils literal"&gt;QPushButton&lt;/tt&gt; (instance member name of &lt;tt class="docutils literal"&gt;record_button&lt;/tt&gt;), as a instance member. Since I added the push button to our layout, the layout will actually keep a reference to the instance, preventing garbage&amp;nbsp;collection.&lt;/p&gt;
&lt;p&gt;So all of that code should be review. Create a layout, add some widgets to the layout, and then set the layout on our&amp;nbsp;widget.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s go ahead and wire our creation up using signals and&amp;nbsp;slots.&lt;/p&gt;
&lt;p&gt;As the &lt;a class="reference external" href="http://doc.qt.io/qt-5/signalsandslots.html"&gt;documentation states&lt;/a&gt;, signals and slots are used for communication between objects. In this case, we want to communicate between our push button object and our record video object. Specially, when we push the &amp;#8220;Run&amp;#8221; button, we want our video recording object to start&amp;nbsp;recording.&lt;/p&gt;
&lt;p&gt;So looking at the &lt;a class="reference external" href="http://doc.qt.io/qt-5/qabstractbutton.html#signals"&gt;push button documentation&lt;/a&gt;, we can see that we have several signals available to us. The one we&amp;#8217;re interested in is &lt;tt class="docutils literal"&gt;clicked&lt;/tt&gt;. Now the function that we want called after our button is &lt;tt class="docutils literal"&gt;clicked&lt;/tt&gt; is the &lt;tt class="docutils literal"&gt;start_recording&lt;/tt&gt; method on the &lt;tt class="docutils literal"&gt;VideoRecord&lt;/tt&gt; instance. To do this, we&amp;#8217;ll call the &lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; method on the &lt;tt class="docutils literal"&gt;clicked&lt;/tt&gt; class instance and pass our &lt;tt class="docutils literal"&gt;start_recording&lt;/tt&gt; method in as the argument. We also need to wire our &lt;tt class="docutils literal"&gt;image_data&lt;/tt&gt; signal to our &lt;tt class="docutils literal"&gt;image_data_slot&lt;/tt&gt;. That&amp;#8217;s a lot of words. Let&amp;#8217;s see it in&amp;nbsp;action.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceRecogControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;haar_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detect_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video_recording&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="n"&gt;record_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Qtwidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detect_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record_button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="c1"&gt;# Connect our signal `clicked` to our method `start_recording`&lt;/span&gt;
         &lt;span class="n"&gt;record_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video_recording&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_recording&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="c1"&gt;# alias out the method call `image_data_slot` to make the code&lt;/span&gt;
         &lt;span class="c1"&gt;# line shorter&lt;/span&gt;
         &lt;span class="n"&gt;image_data_slot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detect_widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_data_slot&lt;/span&gt;

         &lt;span class="c1"&gt;# connect our signal `image_data` to our method `image_data_slot`&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video_recording&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In PyQt, we can connect signals to any method call as long as the signatures match. In the case of our &lt;tt class="docutils literal"&gt;clicked&lt;/tt&gt; method, no arguments are transmitted when the signal is emitted. However, if we look at the &lt;a class="reference external" href="http://doc.qt.io/qt-5/qcombobox.html"&gt;QComboBox signal documentation&lt;/a&gt;, we&amp;#8217;ll see that some of the signals (&lt;tt class="docutils literal"&gt;activated&lt;/tt&gt; for example) emit arguments that we need to catch in our method&amp;nbsp;call.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go ahead and define our own custom signal. For example, maybe we want to transmit a signal whenever a face is detected in our widget. Let&amp;#8217;s go ahead and subclass our &lt;tt class="docutils literal"&gt;FaceDetectionWidget&lt;/tt&gt;. We&amp;#8217;ll create a &lt;tt class="docutils literal"&gt;face_detected&lt;/tt&gt; signal and override our &lt;tt class="docutils literal"&gt;image_data_slot&lt;/tt&gt; method to emit the face detected signal whenever we find a&amp;nbsp;face.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceSignalWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="c1"&gt;# Create our signal&lt;/span&gt;
     &lt;span class="n"&gt;face_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyqtSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image_data_slot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;# If faces our found, `emit` our signal&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

         &lt;span class="c1"&gt;# NOTE: this code is same as base class ----------------------------&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_qimage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFixedSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="c1"&gt;# -----------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we call the &lt;tt class="docutils literal"&gt;emit&lt;/tt&gt; method on the &lt;tt class="docutils literal"&gt;face_detected&lt;/tt&gt; signal.&lt;/p&gt;
&lt;p&gt;But how do we emit arguments? Well we&amp;#8217;ll need to define the arguments that we want to pass in our signal. So let&amp;#8217;s say that we not only want to emit the fact that we detected a face, but we want to emit the coordinates of the face as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceSignalWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;face_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyqtSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="c1"&gt;# define our `face_detection_coords` signal&lt;/span&gt;
     &lt;span class="n"&gt;face_detection_coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyqtSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image_data_slot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;# If faces our found, `emit` our signal&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="c1"&gt;# emit the coordinates, or at least the (x,y), width and height&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detection_coords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="c1"&gt;# NOTE: this code is same as base class ----------------------------&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_qimage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFixedSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="c1"&gt;# -----------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that signals are always defined as class variables instead of instance variables. If you&amp;#8217;re confused about the difference, this &lt;a class="reference external" href="https://stackoverflow.com/questions/8959097/what-is-the-difference-between-class-and-instance-variables"&gt;stack overflow post&lt;/a&gt; does a good job of differentiating the&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;That should be enough to get you started. Be sure to check out the &lt;a class="reference external" href="http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html"&gt;PyQt documentation on signals and slots&lt;/a&gt; for a more in depth&amp;nbsp;treatment.&lt;/p&gt;
</content><category term="PyQt"></category></entry><entry><title>PyQt Tutorial Index</title><link href="https://benhoff.net/pyqt-tutorial-index.html" rel="alternate"></link><published>2017-07-20T23:09:00-05:00</published><updated>2017-07-20T23:09:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-20:/pyqt-tutorial-index.html</id><summary type="html">&lt;p&gt;Alright, this is top level index showing how to follow the PyQt Tutorial. Feel free to jump in wherever you need&amp;nbsp;to.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%" /&gt;
&lt;col width="70%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Article&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/pyqt-hello-world.rst"&gt;Hello World&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Create a &amp;#8220;Hello World&amp;#8221; Graphical User Interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/qt-interface-design.rst"&gt;Interface Design&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Review the three major types of Interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/pyqt-layout-design.rst"&gt;Layout Mangement&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hands on approach how to create …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;Alright, this is top level index showing how to follow the PyQt Tutorial. Feel free to jump in wherever you need&amp;nbsp;to.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%" /&gt;
&lt;col width="70%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Article&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/pyqt-hello-world.rst"&gt;Hello World&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Create a &amp;#8220;Hello World&amp;#8221; Graphical User Interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/qt-interface-design.rst"&gt;Interface Design&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Review the three major types of Interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/pyqt-layout-design.rst"&gt;Layout Mangement&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hands on approach how to create Interfaces using
layouts in Qt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://benhoff.net/pyqt-signals-slots.rst"&gt;Signals and Slots&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Overview of signals and slots&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="PyQt"></category></entry><entry><title>PyQt Layout Design</title><link href="https://benhoff.net/pyqt-layout-design.html" rel="alternate"></link><published>2017-07-17T16:14:00-05:00</published><updated>2017-07-17T16:14:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-17:/pyqt-layout-design.html</id><summary type="html">&lt;p class="first last"&gt;Let&amp;#8217;s work on creating a single interface design face recognition&amp;nbsp;application.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As part of our &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;PyQt Tutorial series&lt;/a&gt; we&amp;#8217;ve built a &lt;a class="reference external" href="https://benhoff.net/pyqt-hello-world.rst"&gt;Hello World&lt;/a&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt; application and gone through some basic &lt;a class="reference external" href="https://benhoff.net/qt-interface-design.rst"&gt;Interface Design&lt;/a&gt; options. In this section, we&amp;#8217;re going to implement the first type of Interface, a Single Document Interface. We&amp;#8217;re going to create a Face Recognition Application, but since I&amp;#8217;d like to focus on the PyQt &lt;span class="caps"&gt;GUI&lt;/span&gt; development process, the actual face recognition part will be separate from this set of&amp;nbsp;tutorials.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re just jumping in here, check out &lt;a class="reference external" href="https://github.com/benhoff/blog/blob/master/scripts/pyqt-hello-world.py"&gt;this link&lt;/a&gt; to see the code that we&amp;#8217;re starting&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s install a face recognition ready&amp;nbsp;widget.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install facerecog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then we&amp;#8217;ll import it into our&amp;nbsp;program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;facerecog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainWidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;re interested in seeing the coding going on behind the face recognition piece, feel free to explore it in &lt;a class="reference external" href="https://benhoff.net/face-detection-in-pyqt.rst"&gt;this blog post&lt;/a&gt;. Otherwise, let&amp;#8217;s instantiate our face recognition widget and put it in our&amp;nbsp;program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;facerecog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainWidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# We need to make the QApplication before our QMainWindow&lt;/span&gt;
    &lt;span class="c1"&gt;# We also need to pass in our system argument values (sys.argv)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Here&amp;#39;s that instantiation bit again.&lt;/span&gt;
    &lt;span class="n"&gt;haar_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_haarcascade_filepath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# QMainWindow requires a central widget. We&amp;#39;ll pass in our MainWidget here&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Show our main window&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Start the event loop processing&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" class="align-center" src="https://benhoff.net/images/face-recognition-success.png" /&gt;
&lt;p&gt;Obviously this code isn&amp;#8217;t the whole story to the &lt;span class="caps"&gt;GUI&lt;/span&gt; development. But it demonstrates an important fact about Qt desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; framework. Everything that the end user interfaces with is a widget. So in this case, since we already have a ready made widget, we can plug it in and send our user on their merry&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;The end goal for most of our interface design then using the Qt framework will be to wrap our interface into widgets. So how do we do&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;Well, as we talked about in the Hello World blog post, we can add in some functionality of a menu bar, status bar, dock widgets,&amp;nbsp;etc.&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://doc.qt.io/qt-5/images/mainwindowlayout.png" /&gt;
&lt;p&gt;But most of the time what we want to do is group, or layout, multiple widgets in an area. The way to do that in Qt is through Layout&amp;nbsp;Management.&lt;/p&gt;
&lt;p&gt;All QWidget classes use layouts to manage the life cycle of their subwidgets. In addition to managing the life cycle, ayouts&amp;nbsp;also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Positioning of child&amp;nbsp;widgets.&lt;/li&gt;
&lt;li&gt;Sensible default sizes for&amp;nbsp;windows.&lt;/li&gt;
&lt;li&gt;Sensible minimum sizes for&amp;nbsp;windows.&lt;/li&gt;
&lt;li&gt;Resize&amp;nbsp;handling.&lt;/li&gt;
&lt;li&gt;Automatic updates when contents change:&lt;ul&gt;
&lt;li&gt;Font size, text or other contents of child&amp;nbsp;widgets.&lt;/li&gt;
&lt;li&gt;Hiding or showing a child&amp;nbsp;widget.&lt;/li&gt;
&lt;li&gt;Removal of child&amp;nbsp;widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to be clear, the Qt Documentation does an better job then I will of explaining the in&amp;#8217;s and out&amp;#8217;s of layout management, so I&amp;#8217;d recommend you &lt;a class="reference external" href="http://doc.qt.io/qt-5/layout.html"&gt;check it out&lt;/a&gt;. But we&amp;#8217;ll go through the basics here of instantiating, using and setting layouts&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;First we need a master widget that we can set the layout&amp;nbsp;on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;QtWidgets&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MasterWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to pick which layout that we want to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;Some of my favorite layouts include &lt;tt class="docutils literal"&gt;QHBoxLayout&lt;/tt&gt; which arranges widgets horizontally, &lt;tt class="docutils literal"&gt;QVBoxLayout&lt;/tt&gt;, which arranges widgets vertically, and &lt;tt class="docutils literal"&gt;QGridLayout&lt;/tt&gt; which allows you to put things in a&amp;nbsp;grid.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s use a layout to stack a couple of widgets on top of each other. We&amp;#8217;ll do this using the &lt;tt class="docutils literal"&gt;addWidget&lt;/tt&gt; function on our instantiated layout. Once we&amp;#8217;ve added all of the widgets that we want, we&amp;#8217;ll then set the layout using the &lt;tt class="docutils literal"&gt;setLayout&lt;/tt&gt; method on our &lt;tt class="docutils literal"&gt;MasterWidget&lt;/tt&gt; class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;QtWidgets&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MasterWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Create a label, push button and line edit widgets&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is a label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;run_push_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Click Me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;line_edit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLineEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Default line edit text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# create our layout, a vertical layout&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# add widgets&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_edit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_push_button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# set the layout of our master widget&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the resulting gui for the above code, showing all of the widgets stacked&amp;nbsp;vertically.&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://benhoff.net/images/pyqt-layout-example.png" /&gt;
&lt;p&gt;We could also use a grid layout. The &lt;span class="caps"&gt;API&lt;/span&gt; for that is a little different. Whenever we add a widget, we need to pass in the row and the column. I&amp;#8217;m going to do this using key word arguments so that you can see what is going on. If we remove the &lt;tt class="docutils literal"&gt;row&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;column&lt;/tt&gt; key word arguments, this would still be valid code, as these are the positional arguments as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# add as row 0, column 0&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add as row 1, column 0&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add as row 1, column 1&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_push_button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below, you can see the change in the appearance of our &lt;span class="caps"&gt;GUI&lt;/span&gt; with the above layout&amp;nbsp;changes.&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://benhoff.net/images/pyqt-layout-example-2.png" /&gt;
&lt;p&gt;Layouts are a powerful way to add more widgets and control how those new widgets look in our &lt;span class="caps"&gt;GUI&lt;/span&gt;, so don&amp;#8217;t be afraid to use&amp;nbsp;them!&lt;/p&gt;
&lt;div class="section" id="wrapup"&gt;
&lt;h2&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;You can catch the source code for the tutorial up to this point &lt;a class="reference external" href="https://github.com/benhoff/blog/blob/master/scripts/pyqt-layout-design.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only one problem with our &lt;span class="caps"&gt;GUI&lt;/span&gt; currently. If we click that push button, nothing happens. What&amp;#8217;s up with that? Well we need to connect our signals and slots together. Check out how to do that, in the &lt;a class="reference external" href="https://benhoff.net/pyqt-signals-slots.rst"&gt;Signals and Slots&lt;/a&gt; post. Or, if you&amp;#8217;re already familiar with how signals and slots work, feel free to skip ahead using &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;this index&lt;/a&gt; of the entire&amp;nbsp;tutorial.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyQt"></category></entry><entry><title>Face Detection with OpenCV and PyQt</title><link href="https://benhoff.net/face-detection-opencv-pyqt.html" rel="alternate"></link><published>2017-07-14T19:37:00-05:00</published><updated>2017-07-14T19:37:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-14:/face-detection-opencv-pyqt.html</id><summary type="html">&lt;p class="first last"&gt;Getting Face Detection working with OpenCV and&amp;nbsp;PyQt&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Let&amp;#8217;s install some&amp;nbsp;stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install opencv-python numpy PyQt5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s import some&amp;nbsp;stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;#8217;ll build this backwards, starting with the smallest pieces and working bigger. Let&amp;#8217;s start working on creating the video recording and getting the face coordinates&amp;nbsp;out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;camera_port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="c1"&gt;# TODO: detect faces now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Awesome, now let&amp;#8217;s work on the facial&amp;nbsp;detection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CascadeClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_min_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# haarclassifiers work better in black and white&lt;/span&gt;
                &lt;span class="n"&gt;gray_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;gray_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equalizeHist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grey_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detectMultiScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grey_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleFactor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minNeighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE_SCALE_IMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_min_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# TODO: Paint on a surface and add the faces.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok so we need something to paint on. This is where we need to switch gears a little bit. We&amp;#8217;re going to use Qt to paint on. So we&amp;#8217;ll need to rework some of classes to play nicely with&amp;nbsp;Qt.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll start by making our &lt;tt class="docutils literal"&gt;RecordVideo&lt;/tt&gt; a subclass of &lt;tt class="docutils literal"&gt;QObject&lt;/tt&gt;. We&amp;#8217;ll also create a signal called &lt;tt class="docutils literal"&gt;image_data&lt;/tt&gt; and have it emit a &lt;tt class="docutils literal"&gt;np.ndarray&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;timerEvent&lt;/tt&gt;. We&amp;#8217;ll use it in the &lt;tt class="docutils literal"&gt;timerEvent&lt;/tt&gt; so that we can keep it single&amp;nbsp;threaded.&lt;/p&gt;
&lt;p&gt;If that sounds confusing, don&amp;#8217;t worry. The code isn&amp;#8217;t that&amp;nbsp;long.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;image_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyqtSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;camera_port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QBasicTimer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_recording&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timerEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt;

                &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_ready&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to extend our Face Detection as well. We&amp;#8217;ll make it a &lt;tt class="docutils literal"&gt;QWidget&lt;/tt&gt;, because we want to paint on it. We&amp;#8217;ll add a new method that converts our ndarray into a &lt;tt class="docutils literal"&gt;QImage&lt;/tt&gt;. The painting loop occasionally might be too slow, so we&amp;#8217;ll save the image to the class and call the &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; method at the end of the slot. We&amp;#8217;ll draw the rectangle on into the data using the &lt;tt class="docutils literal"&gt;cv2.rectangle&lt;/tt&gt; method&amp;nbsp;call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CascadeClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_min_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# haarclassifiers work better in black and white&lt;/span&gt;
                &lt;span class="n"&gt;gray_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;gray_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equalizeHist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gray_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detectMultiScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gray_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleFactor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minNeighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE_SCALE_IMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_min_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image_data_slot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_qimage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFixedSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_qimage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
                &lt;span class="n"&gt;bytesPerLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
                &lt;span class="n"&gt;QImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QImage&lt;/span&gt;

                &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesPerLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format_RGB888&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgbSwapped&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;paintEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;painter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPainter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;painter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#8217;s tie these two together. We&amp;#8217;ll create a MainWidget class that instantiates both of our two custom classes, puts our widget in a Layout along with a start button. We also need to tie together both the image signal/slot and the click&amp;#8217;d and start recording&amp;nbsp;method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;haarcascade_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;haarcascade_filepath&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detection_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FaceDetectionWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# TODO: set video port&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RecordVideo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# Connect the image data signal and slot together&lt;/span&gt;
                &lt;span class="n"&gt;image_data_slot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detection_widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_data_slot&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# connect the run button to the start recording slot&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_recording&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# Create and set the layout&lt;/span&gt;
                &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_detection_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we just need to create our QApplication, QMainWindow, and our custom&amp;nbsp;MainWidget.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;main_window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;main_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;haar_cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to pass in the haarcascade file. I saved it using this shell&amp;nbsp;script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml &amp;gt; haarcascade_frontalface_default.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll have to change the code to match your local&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll distribute this out on pypi so you can install it&amp;nbsp;eventually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;script_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;cascade_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haarcascade_frontalface_default.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;cascade_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cascade_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="https://benhoff.net/images/face-recognition-success.png" /&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;You can see all the source code &lt;a class="reference external" href="https://github.com/benhoff/blog/blob/master/scripts/face-detection-in-pyqt.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="PyQt"></category></entry><entry><title>Setup Mailgun with Google Domain</title><link href="https://benhoff.net/setup-mailgun-with-google-domain.html" rel="alternate"></link><published>2017-07-05T16:24:00-05:00</published><updated>2017-07-05T16:24:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-05:/setup-mailgun-with-google-domain.html</id><summary type="html">&lt;p class="first last"&gt;Setting up the &lt;span class="caps"&gt;DNS&lt;/span&gt; configuration of Mailgun for Google&amp;nbsp;Domain&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Right, let&amp;#8217;s setup Mailgun. I&amp;#8217;m using Mailgun for my Discourse&amp;nbsp;install.&lt;/p&gt;
&lt;p&gt;The first step is to add your&amp;nbsp;domain.&lt;/p&gt;
&lt;p&gt;Mailgun is going to recommend that you use a subdomain, such as &lt;em&gt;mg.mydomain.com&lt;/em&gt;
Whether you want to do that or not is up to you, the steps will be similar. I&amp;#8217;m not going to. So for the sake of argument here, the domain that we are setting up is &lt;em&gt;mydomain.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mailgun is going to give you 4 steps. We will need to go &lt;a class="reference external" href="https://domains.google/#/"&gt;Google Domains&lt;/a&gt;. Click the &lt;em&gt;Manage My Domains&lt;/em&gt;, and then click the &lt;em&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/em&gt; button on the domain of&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;re there, scroll all the way down to the section that is titled &lt;em&gt;Custom resource records&lt;/em&gt;. It&amp;#8217;ll look something like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/google-domain-1.png" style="width: 400px; height: 100px;" /&gt;
&lt;p&gt;That accomplishes Step 1. &lt;em&gt;Go To Your &lt;span class="caps"&gt;DNS&lt;/span&gt; Provider&lt;/em&gt; from the 4 step process in&amp;nbsp;Mailgun.&lt;/p&gt;
&lt;p&gt;Under Step 2, &lt;em&gt;Add &lt;span class="caps"&gt;DNS&lt;/span&gt; Records For Sending&lt;/em&gt; on the &lt;strong&gt;Mailgun&lt;/strong&gt; site, there are three resources we need to add: &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TXT&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt;, and a second &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s add the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TXT&lt;/span&gt;&lt;/tt&gt; first.&lt;/p&gt;
&lt;p&gt;The top bar that is slightly grayed out with a blue button &amp;#8220;Add&amp;#8221; button on the far right is the interface that we&amp;#8217;ll be using to add these documents. If you have a subdomain, (e.g. &amp;#8220;mg.mydomain.com&amp;#8221;), the subdomain will go in the far left &amp;#8220;Name&amp;#8221; column, otherwise leave it blank. The &amp;#8220;Type&amp;#8221; drop down menu (second column from the left), we&amp;#8217;ll change from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;TXT&lt;/span&gt;&amp;#8221;. You can leave the &amp;#8220;&lt;span class="caps"&gt;TTL&lt;/span&gt;&amp;#8221; column  as is. In the &amp;#8220;Data&amp;#8221; column, we&amp;#8217;ll put in the &lt;span class="caps"&gt;SPF&lt;/span&gt; value &amp;#8220;v=spf1 include:mailgun.org ~all&amp;#8221;. Hit Add, and you should see the table update below the top&amp;nbsp;bar.&lt;/p&gt;
&lt;p&gt;Next, we&amp;#8217;ll add in the &lt;span class="caps"&gt;DKIM&lt;/span&gt;, or Domain Key. We&amp;#8217;ll follow the same procedure, although this time you&amp;#8217;ll need to add in the Hostname that Mailgun specifies. Change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;TXT&lt;/span&gt;&amp;#8221; and paste the value associated with the domain key into the &amp;#8220;Data&amp;#8221; column (should be in the form of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k=rsa;p={a&lt;/span&gt; bunch of letters}&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Next we&amp;#8217;ll add in the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt; records.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll follow the same drill, subdomain (if you have one) in the far left, change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;MX&lt;/span&gt;&amp;#8221; and then paste the &lt;tt class="docutils literal"&gt;mxa.mailgun.org.&lt;/tt&gt; in the. You can either hit the plus sign on the right hand side of the &amp;#8220;Data&amp;#8221; column, or hit &amp;#8220;Add&amp;#8221; and then scroll down to the entry and click the &amp;#8220;Edit&amp;#8221; button. As a forewarning, Google will automatically add the number 10 to your record so &lt;tt class="docutils literal"&gt;mxa.mailgun.org.&lt;/tt&gt; will change to &lt;tt class="docutils literal"&gt;10 mxa.mailgun.org.&lt;/tt&gt;. Totally legit, don&amp;#8217;t&amp;nbsp;panic.&lt;/p&gt;
&lt;p&gt;Add in the second &amp;#8220;&lt;span class="caps"&gt;MX&lt;/span&gt;&amp;#8221; record &lt;tt class="docutils literal"&gt;mxb.mailgun.org.&lt;/tt&gt; and &amp;#8220;Add&amp;#8221; or save the&amp;nbsp;record.&lt;/p&gt;
&lt;p&gt;Last, according to Step 3) we need to Add &lt;span class="caps"&gt;DNS&lt;/span&gt; Records for&amp;nbsp;Tracking.&lt;/p&gt;
&lt;p&gt;Copy the Hostname that Mailgun provides under Step 3, change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&amp;#8221; and enter in the value of &lt;tt class="docutils literal"&gt;mailgun.org&lt;/tt&gt; into the &amp;#8220;Data&amp;#8221; column. Click&amp;nbsp;add.&lt;/p&gt;
&lt;p&gt;Step 4 is wait for your domain to verify. In my experience, it was almost instantaneous with&amp;nbsp;Google.&lt;/p&gt;
&lt;p&gt;In the end it should look something (although not exactly) like&amp;nbsp;this.&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/google-domain-2.png" style="width: 600px; height: 424px;" /&gt;
</content><category term="Random"></category></entry><entry><title>Vexbot State of the Union</title><link href="https://benhoff.net/vexbot-state-of-the-union.html" rel="alternate"></link><published>2017-07-01T16:30:00-05:00</published><updated>2017-07-01T16:30:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-01:/vexbot-state-of-the-union.html</id><summary type="html">&lt;p&gt;All right, let&amp;#8217;s talk about &lt;a class="reference external" href="https://github.com/benhoff/vexbot"&gt;Vexbot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot was created to scratch a very specific itch, conglomerating multiple chat sources into one place. No other bot (to my knowledge) can do this &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot does this by launching a subprocess for each chat provider (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Youtube, etc.) and using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s talk about &lt;a class="reference external" href="https://github.com/benhoff/vexbot"&gt;Vexbot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot was created to scratch a very specific itch, conglomerating multiple chat sources into one place. No other bot (to my knowledge) can do this &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot does this by launching a subprocess for each chat provider (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Youtube, etc.) and using messaging (via &lt;a class="reference external" href="http://zeromq.org/"&gt;zmq&lt;/a&gt;) to communicate between them all. The &lt;span class="caps"&gt;GUI&lt;/span&gt; application, &lt;a class="reference external" href="https://github.com/benhoff/CHATIMUSMAXIMUS"&gt;chatimusmaximus&lt;/a&gt; provides the user interface so that I could see all of the chat streams in one central&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Vexbot has some simple chat processing, including direct string matching, and some natural language processing using the bag of words method to guess intent. These pieces are significantly underdeveloped. The reason that these important pieces are underdeveloped is because a large amount of recent developer time has has been spent devoted to two important pieces: settings and process management &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For settings management, I was originally using &lt;a class="reference external" href="http://www.yaml.org/start.html"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt; to manage all the settings. I really liked this approach as it allowed me to leave comments in the configuration file for my users. For a simple stationary setup, this would work well. However, for changing values programmatically, the limitations of this system were quickly apparent. I wanted to create a quick setup feature where the setup could be programmed from the command line, likely using a Text User Interface (&lt;span class="caps"&gt;TUI&lt;/span&gt;). &lt;span class="caps"&gt;YAML&lt;/span&gt; files aren&amp;#8217;t the best format for doing this,&amp;nbsp;frankly.&lt;/p&gt;
&lt;p&gt;I started exploring &lt;a class="reference external" href="https://www.sqlalchemy.org/"&gt;SQLALchemy&lt;/a&gt; for this purpose, but have yet to finish up an implementation that I&amp;#8217;m happy with. The current idea is that more &amp;#8220;dynamic&amp;#8221; services (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;) will get their own table for settings. Other, more static services will use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/INI_file"&gt;&lt;span class="caps"&gt;INI&lt;/span&gt;&lt;/a&gt; format. The python standard library &lt;a class="reference external" href="https://docs.python.org/3/library/configparser.html"&gt;configparser&lt;/a&gt; library handles the &lt;span class="caps"&gt;INI&lt;/span&gt; format nicely, it&amp;#8217;s easy enough to write out programmatically, and common to rewrite using a text&amp;nbsp;editor.&lt;/p&gt;
&lt;p&gt;So now I&amp;#8217;ve got an &lt;span class="caps"&gt;SQL&lt;/span&gt; database and a configuration file that I need to unify into one easy to use &lt;span class="caps"&gt;API&lt;/span&gt;. I also need to settle on schema that I like. It&amp;#8217;ll take work, but I&amp;#8217;m happy enough with the&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;The thing I&amp;#8217;m not happy about is the process management&amp;nbsp;piece.&lt;/p&gt;
&lt;p&gt;Right not the process management is done in python, using the &lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess&lt;/a&gt; module. And I&amp;#8217;m really not happy about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The point of Vexbot is not to duplicate any functionality that I have to. And man, have you ever noticed how good operating systems are at process management? Problem being that operating systems are hilariously un-cross&amp;nbsp;platform.&lt;/p&gt;
&lt;p&gt;I would probably double down and use systemd, but it forces me to bump up to the system level, instead of staying in userland. It&amp;#8217;s an unsolved issue. For now, I&amp;#8217;ll stick with using as much as the subprocess module as possible. Start, stop, kill, restart, update processes. The whole&amp;nbsp;shebang.&lt;/p&gt;
&lt;p&gt;Once the settings and the process management piece is taken care of, I&amp;#8217;ll get back to the natural language processing and expanding the&amp;nbsp;plugins.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The next closest well supported piece of software that I could find in Python was &lt;a class="reference external" href="https://github.com/errbotio/errbot"&gt;errbot&lt;/a&gt;. Errbot had some limitations though, mainly only allowing a single chat provider at a time. Errbot does allow one thing that Vexbot does not, a unified &lt;span class="caps"&gt;API&lt;/span&gt; for chat related programming regardless of backend.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It should be noted that the inital push was to get simple one-way text communication working between the various supported text services. Two way communication, or in-service commands haven&amp;#8217;t been, and continue to not be, a priority.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Random"></category></entry><entry><title>Keeping Track of Past Research</title><link href="https://benhoff.net/keeping-track-of-past-research.html" rel="alternate"></link><published>2017-06-27T17:07:00-05:00</published><updated>2017-06-27T17:07:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-27:/keeping-track-of-past-research.html</id><summary type="html">&lt;p class="first last"&gt;Reviewing multiple methods of keeping track of past&amp;nbsp;research&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve got a very specific&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;While I was doing research as part of my &lt;a class="reference external" href="https://www.packtpub.com/big-data-and-business-intelligence/learning-python-data-analysis-video"&gt;Learning Python Data Analysis&lt;/a&gt; series, I stumbled across a slideshare that showed the different types of analysis that you can do using Twitter data. I think the author ended up deep diving into building a network diagram showing the different connections between tweets. I want to deep dive into a different aspect of Twitter data analysis, following on the trend of doing live analysis that I did in my aforementioned video series&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;My problem is that I can&amp;#8217;t find that&amp;nbsp;slideshare.&lt;/p&gt;
&lt;p&gt;Now I admittedly have done very little research to re-find it. I actually don&amp;#8217;t feel like doing any research though. I would like for it to be served to me on a silver platter, since I already spent probably 10+ hours Google&amp;nbsp;searching.&lt;/p&gt;
&lt;p&gt;So I went looking for a better&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a couple of different ways I&amp;#8217;ve&amp;nbsp;found.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mind&amp;nbsp;maps&lt;/li&gt;
&lt;li&gt;Note&amp;nbsp;cards&lt;/li&gt;
&lt;li&gt;Wiki&amp;#8217;s&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="mind-maps"&gt;
&lt;h2&gt;Mind&amp;nbsp;Maps&lt;/h2&gt;
&lt;p&gt;Mind maps work by showing the connections between different&amp;nbsp;pieces.&lt;/p&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/1/1a/Tennis-mindmap.png" style="width: 400px; height: 282px;" /&gt;
&lt;p&gt;I&amp;#8217;ve been aware of mind maps before, but I was recently reminded of them by an interactive mind map I saw on Github, promising/labeled &amp;#8220;Learn Anything&amp;#8221;. Here&amp;#8217;s the &lt;a class="reference external" href="https://github.com/nikitavoloboev/learn-anything"&gt;repo&lt;/a&gt; and here&amp;#8217;s the &lt;a class="reference external" href="https://learn-anything.xyz/"&gt;website&lt;/a&gt; if you want to take a&amp;nbsp;look.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be upfront, I don&amp;#8217;t really see the use in mind maps&amp;#8230; or at least not software generated ones. The Learn Anything site seems to be more a link map, which I can kind of buy for usefulness?&amp;nbsp;Kinda?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="note-cards"&gt;
&lt;h2&gt;Note&amp;nbsp;Cards&lt;/h2&gt;
&lt;p&gt;This is a method I was thought while I was in school, and is apparently still in use today. The basic gist is to record the idea or information along with the original source on note cards. So you might pull the idea of &amp;#8220;Elephants can hear in the infrasonic region&amp;#8221; out of a certain book. The useful point of note cards is not to record the idea, but the actual source. That way, when you were writing a research paper you could form a coherent paper/thought process without worrying about keeping track of the sources, as they were a standalone&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;Microsoft Word has a version of this feature that I have [ab]used to write reports before. There are also standalone products that do a version of this as well. The challenge is that webpages, unlike books, do not fit well within this format. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Link_rot"&gt;Link rot&lt;/a&gt; is also a concern with this&amp;nbsp;method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wiki-s"&gt;
&lt;h2&gt;Wiki&amp;#8217;s&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been interested in the idea of creating wiki&amp;#8217;s for a long time. My interests are diverse, and the idea of hooking a wiki site up to a search engine is very, very appealing. &lt;a class="reference external" href="http://calnewport.com/blog/2009/05/11/how-to-build-a-paper-research-wiki/"&gt;This Blog post&lt;/a&gt; explores in depth a particular research methodology the author recommends as key to enabling his&amp;nbsp;research.&lt;/p&gt;
&lt;p&gt;However, according to Wikipedia, a wiki is a website where users collaboratively edit articles. In this case, keeping track of individual lines of research isn&amp;#8217;t really a collaborative effort. Wikipedia also mentions that wiki&amp;#8217;s are basically Content Management Systems (&lt;span class="caps"&gt;CMS&lt;/span&gt;&amp;#8217;s), which is a pretty well worn software model. It would likely be possible to explore a open source &lt;span class="caps"&gt;CMS&lt;/span&gt; for this solution. Or you know, maybe a&amp;nbsp;blog&amp;#8230;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blogs"&gt;
&lt;h2&gt;Blogs&lt;/h2&gt;
&lt;p&gt;Blogs at the end of the day are just content and can say anything. One of my favorite posts so far has been the &lt;a class="reference external" href="https://benhoff.net/flashing-beaglebone.rst"&gt;Beaglebone Black&lt;/a&gt; post, where I walked through the steps and frustrations of flashing a Beaglebone black. While I was originally trying to install OpenVPN on the Beaglebone and ended up not doing that, the post serves as a reference point when I (invariably) reflash another one. But I&amp;#8217;ve got some interesting tidbits and posts that should save me some time&amp;#8230; next&amp;nbsp;time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing&amp;nbsp;Thoughts&lt;/h2&gt;
&lt;p&gt;The truth of the matter is there&amp;#8217;s likely no single model or silver bullet software that is going to make this easy for me. My use case falls somewhere between &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Knowledge_transfer"&gt;Knowledge Transfer&lt;/a&gt; and individual&amp;nbsp;research.&lt;/p&gt;
&lt;p&gt;Committing to a research methodology or note taking process would be the main piece. Since I&amp;#8217;ve enjoyed writing up blog posts and linking them to death with outside sources, I&amp;#8217;ll likely keep that approach until further&amp;nbsp;notice.&lt;/p&gt;
&lt;p&gt;On the software side, I would like to figure out a way to keep track of interesting links and download/index the page contents to stave off the issues associated with link rot. Hooking this up to a search engine, (likely elastic search) combined with the aforementioned blog posts I and my video series transcript would scratch the 80% solution. If you know of an easy way to do that, drop me a&amp;nbsp;line.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Random"></category></entry><entry><title>Qt Interface Design</title><link href="https://benhoff.net/qt-interface-design.html" rel="alternate"></link><published>2017-06-26T17:21:00-05:00</published><updated>2017-06-26T17:21:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-26:/qt-interface-design.html</id><summary type="html">&lt;p class="first last"&gt;Reviewing types of interface design for&amp;nbsp;Qt&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As part of our &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;PyQt Tutorial series&lt;/a&gt;, we&amp;#8217;ve got a &lt;a class="reference external" href="https://benhoff.net/pyqt-hello-world.rst"&gt;hello world gui app&lt;/a&gt; running. Now we need to design our application. So let&amp;#8217;s talk about some general desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; design. You might have used a lot of &lt;span class="caps"&gt;GUI&lt;/span&gt; applications, but you probably never noticed their design. Especially (and super ironically) if it was done well. As a fun exercise, if someone asked you to design a web browser right now, what would your interface look&amp;nbsp;like?&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re stumped, don&amp;#8217;t worry. A lot of people have thought about this before and have ideas. Three main ones in&amp;nbsp;fact.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Single Document&amp;nbsp;Interface&lt;/li&gt;
&lt;li&gt;Tabbed Document&amp;nbsp;Interface&lt;/li&gt;
&lt;li&gt;Multiple Document&amp;nbsp;Interface&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="single-document-interfaces"&gt;
&lt;h2&gt;Single Document&amp;nbsp;Interfaces&lt;/h2&gt;
&lt;p&gt;In a Single Document Interface, there&amp;#8217;s only a single window for each instance of the application. LibreOffice Writer, Microsoft Word, and most other word processors share this&amp;nbsp;design.&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/libreoffice-snap.png" /&gt;
&lt;p&gt;Each document, or application, that&amp;#8217;s opened gets it&amp;#8217;s own window. The window management is done by the native Desktop&amp;nbsp;Environment.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d recommend a single document interface for most GUIs as long as the functionality is simple. Make sure that when you&amp;#8217;re designing your gui that pulling up multiple instances won&amp;#8217;t lock up resources (ports, databases, files,&amp;nbsp;etc.).&lt;/p&gt;
&lt;!-- TODO add in some example code of a single document design. --&gt;
&lt;p&gt;Single document design in PyQt is the default. We&amp;#8217;ve pretty much got it going in our hello world example. The only thing we need to do is add some content to our Gui and organize it. I typically subclass a &lt;tt class="docutils literal"&gt;QWidget&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;QLayout&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;QWidget.setLayout&lt;/tt&gt; function to group things logically. &lt;tt class="docutils literal"&gt;QLayout&lt;/tt&gt; has some subclasses that can be used to logically arrange things. A favorite is to us &lt;tt class="docutils literal"&gt;QVBoxLayout&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;QHBoxLayout&lt;/tt&gt; since things kind of mostly resize correctly in&amp;nbsp;Qt.&lt;/p&gt;
&lt;p&gt;As I mentioned before, Single Document Interface programs are easy to program. A couple of cons however include the fact that it may be challenging to jam advanced functionality into them. Depending on the design or back end, if your user pulls up too instances, it can choke the system&amp;nbsp;resources.&lt;/p&gt;
&lt;p&gt;So what do you do if your interfaces need to be more complicated? Let&amp;#8217;s look at a few&amp;nbsp;alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tabbed-document-interfaces"&gt;
&lt;h2&gt;Tabbed Document&amp;nbsp;Interfaces&lt;/h2&gt;
&lt;p&gt;Tabbed Document Interfaces are an extension of the Single Document Interface. Earlier when I asked what you might use to build a web browser&amp;#8230; Well if you&amp;#8217;re on desktop, you probably thought of a tabbed interface. It&amp;#8217;s the most&amp;nbsp;common.&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/chrome-snap.png" /&gt;
&lt;p&gt;I&amp;#8217;d recommend tabbed document interfaces for anything more complicated than a single&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Qt comes has a custom class to handle creating tabbed interfaces. &lt;tt class="docutils literal"&gt;QTabWidget&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;QTabWidget.addWidget&lt;/tt&gt; functionality are good spots to start. You can also make your own custom one looking at &lt;tt class="docutils literal"&gt;QTabBar&lt;/tt&gt;. I&amp;#8217;ll typically label the tabs logically and try to jam the most interesting/useful information in the left-most tabs (following the left to right reading&amp;nbsp;pattern).&lt;/p&gt;
&lt;p&gt;I think the biggest con that I can think of off the top of my head for a Tabbed design is the inability to change to a single document interface to refer to a previous tab. Web browsers got rid of this limitation by allowing you to pull a tab into a new window. While I believe this can be done with Qt, it would take a large amount of coding to&amp;nbsp;accomplish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-document-interfaces"&gt;
&lt;h2&gt;Multiple Document&amp;nbsp;Interfaces&lt;/h2&gt;
&lt;p&gt;And then multiple document interfaces are just interesting. I haven&amp;#8217;t seen many Multiple Document Interfaces out in the wild. The best example I have off the top of my head of a Multiple Document Interface that I&amp;#8217;ve used is Solidworks, or other mechanical drafting software. Excel also has a Multiple Document&amp;nbsp;Interface.&lt;/p&gt;
&lt;img alt="" src="https://i-msdn.sec.s-msft.com/dynimg/IC6922.gif" /&gt;
&lt;p&gt;I&amp;#8217;m not sure when the best time to use Multiple Document Interfaces would be. The challenge is that instead of letting the desktop environment control the window management, your program does instead. This can break the natural flow of the user, although this may be mitigated if you develop specifically for one platform (looking at you,&amp;nbsp;Windows).&lt;/p&gt;
&lt;p&gt;You can create an &lt;span class="caps"&gt;MDI&lt;/span&gt; in Qt using the &lt;tt class="docutils literal"&gt;QMdiArea&lt;/tt&gt; and then adding windows using &lt;tt class="docutils literal"&gt;QMdiArea.addSubWindow&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d recommend checking out the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multiple_document_interface"&gt;wikipedia&lt;/a&gt; page on the topic. The &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms997505.aspx?ranMID=24542&amp;amp;ranEAID=TnL5HPStwNw&amp;amp;ranSiteID=TnL5HPStwNw-L9gN68KGHNTwS1y_SVKSfw&amp;amp;tduid=(0b68db1eaba6ffcc15fac5f2d8ab4540)(256380)(2459594)(TnL5HPStwNw-L9gN68KGHNTwS1y_SVKSfw)()"&gt;Micrsoft Developers Network&lt;/a&gt; also has some documentation that might be of further&amp;nbsp;use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mixed"&gt;
&lt;h2&gt;Mixed&lt;/h2&gt;
&lt;p&gt;As been hinted at several times already, there&amp;#8217;s always the option to mix these main interfaces as much as possible. Keep in mind as well, that there is a lot of support for toolbars and dock widgets (check out the &lt;tt class="docutils literal"&gt;QMainWindow&lt;/tt&gt; documentation). The Integrated Developer Environment (&lt;span class="caps"&gt;IDE&lt;/span&gt;) &lt;tt class="docutils literal"&gt;Spyder&lt;/tt&gt; is a great example of using dock widgets to great&amp;nbsp;effect.&lt;/p&gt;
&lt;p&gt;As I wrap up, I&amp;#8217;d like to recognize this excellent blog post on &lt;a class="reference external" href="https://richnewman.wordpress.com/category/tabbed-document-interface/"&gt;User Interface Design for Business Applications&lt;/a&gt;. I default to Single Document Interfaces as much as possible until complexity gets me, and then I switch to a tabbed interface. But the aforementioned post helped me ensure I wasn&amp;#8217;t overlooking a design while I was crafting my latest&amp;nbsp;creation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-up"&gt;
&lt;h2&gt;Wrap&amp;nbsp;Up&lt;/h2&gt;
&lt;p&gt;Now that we know a couple of different design patterns, let&amp;#8217;s go ahead and apply them! Which is exactly what we&amp;#8217;ll do in the next section of where we look at &lt;a class="reference external" href="https://benhoff.net/pyqt-layout-design.rst"&gt;layout management in PyQt&lt;/a&gt;. Or, if you&amp;#8217;d like to jump around, &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;go to the top level index&lt;/a&gt; and jump to the section of the tutorial that interests you&amp;nbsp;most.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyQt"></category></entry><entry><title>Types of Programs</title><link href="https://benhoff.net/types-of-programs.html" rel="alternate"></link><published>2017-06-17T22:01:00-05:00</published><updated>2017-06-17T22:01:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-17:/types-of-programs.html</id><summary type="html">&lt;p class="first last"&gt;Experienced programmers know one thing beginner programmers don&amp;#8217;t: types of&amp;nbsp;programs.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve had a lot of people ask my how to learn how to&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;And my favorite analogy for that, is that learning programming is a lot like learning carpentry. No one really asks how you become a carpenter. They just go off and build things. Tables, chairs, shelves,&amp;nbsp;boxes.&lt;/p&gt;
&lt;p&gt;Programming is the same way. You should just go off and build things. However, you&amp;#8217;re not sitting on a desktop application right now, or eating off a command line tool everyday. Programming doesn&amp;#8217;t have simple real life analogies that you can figure out how to build. And it&amp;#8217;s also hard to see how programming things are&amp;nbsp;constructed.&lt;/p&gt;
&lt;p&gt;So when you tell people to go off and build things, they&amp;#8217;re not going to know what to build. How do you Google something that you don&amp;#8217;t even know anything&amp;nbsp;about?&lt;/p&gt;
&lt;p&gt;So during this post, we&amp;#8217;re going to go over some of the major client-side types of applications you can build. Or to go back to the earlier carpenter analogy&amp;#8230; we&amp;#8217;re going to talk about some of the furniture that you can build that you interact with on a daily basis. The programming desks and chairs, if you&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Up front disclaimer, the libraries I&amp;#8217;m going to discuss are all Python libraries. However, if you&amp;#8217;re programming in any other language, you should be able to Google &lt;tt class="docutils literal"&gt;java tui library&lt;/tt&gt; for example and come up with similar libraries in your preferred&amp;nbsp;language.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command-line-interfaces" id="id1"&gt;Command Line&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#terminal-user-interfaces" id="id2"&gt;Terminal User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#graphical-user-interfaces" id="id3"&gt;Graphical User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#web-pages" id="id4"&gt;Web&amp;nbsp;Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#knowledge-application" id="id5"&gt;Knowledge&amp;nbsp;Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Command Line&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First and most simple is the command line interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;). Love or hate them, a lot things in the programming world are &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s. These programs are run from the shell and usually have different arguments passed in. Very popular in system administration due to the lack of graphical user interfaces installed in&amp;nbsp;servers.&lt;/p&gt;
&lt;p&gt;Python is a great example of a command line interface&amp;nbsp;program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python runfile.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is the program being run, while &lt;tt class="docutils literal"&gt;runfile.py&lt;/tt&gt; is the argument being passed&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;I often use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; module flag in order to make virtual environments for&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv myvenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is again the program being run, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; &amp;#8220;module&amp;#8221; flag tells python that I want to run a particular python module (the &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module in this case), and the &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module takes another argument to specify what I want the directory for the virtual environment to be named (&lt;tt class="docutils literal"&gt;myvenv&lt;/tt&gt; in this&amp;nbsp;case).&lt;/p&gt;
&lt;p&gt;One of the more advanced command line (non-programming-related) programs I&amp;#8217;ve used is &lt;a class="reference external" href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic syntax for calling this program goes something like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; youtube-dl &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; URL &lt;span class="o"&gt;[&lt;/span&gt;URL...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several libraries in python exist to help you program a &lt;span class="caps"&gt;CLI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Probably the most beginner friendly one is &lt;a class="reference external" href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt;. However Python comes bundled with two in the standard library, including &lt;a class="reference external" href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; and &lt;a class="reference external" href="https://docs.python.org/3/library/getopt.html"&gt;getopt&lt;/a&gt;. I tend to use &lt;tt class="docutils literal"&gt;argparse&lt;/tt&gt; in my personal projects. Your mileage may&amp;nbsp;vary.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s are common for scripting&amp;nbsp;programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal-user-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Terminal User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Terminal User Interfaces (TUIs) really only got named that way after Graphical User Interfaces (GUIs) came into existence. These programs are run in the terminal and tend to take over and redraw the entire terminal. According to Wikipedia, TUIs display computer graphics in text form. I just tend to think of them as programs that can be run from, and take over, the&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;Probably the best know TUIs are famous text editors, including Vim and &lt;span class="caps"&gt;EMACS&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/8/8c/Vim-%28logiciel%29-console.png" style="width: 546px; height: 324px;" /&gt;
&lt;p&gt;Again, there are several libraries to help implement TUIs. The &lt;a class="reference external" href="https://docs.python.org/3/library/curses.html"&gt;curses&lt;/a&gt; library is probably the most well know library to create a &lt;span class="caps"&gt;TUI&lt;/span&gt;, although it is only available in linux. &lt;a class="reference external" href="https://github.com/urwid/urwid"&gt;urwid&lt;/a&gt; is a bit more fully featured library for &lt;span class="caps"&gt;TUI&lt;/span&gt;&amp;nbsp;creation.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;TUI&lt;/span&gt;&amp;#8217;s are probably less common, although I&amp;#8217;ve been interested in creating some for my own personal projects (not enough free time to grok the development process with &lt;tt class="docutils literal"&gt;urwid&lt;/tt&gt;). All of the goodness of a &lt;span class="caps"&gt;CLI&lt;/span&gt;, as you&amp;#8217;re still in the terminal, with a little bit more ease of use (man pages or help only get&amp;#8217;s you so&amp;nbsp;far).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="graphical-user-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Graphical User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;According to Wikipedia, Graphical User Interfaces (GUIs) are a type of interface that allows users to interact with electronic devices through graphical icons and visual indicators. If you figure out what that means, let me know. That aside, &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s are the bread and butter of computing. Your web browser is a &lt;span class="caps"&gt;GUI&lt;/span&gt;. Your games run in GUIs. If you&amp;#8217;ve ever used the Windows or Mac Operating Systems, the predominate way you interact with the computer is through the use of &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/en/5/54/Microsoft_Office_2016_Screenshots.png" style="width: 546px; height: 360px;" /&gt;
&lt;p class="caption"&gt;^ All&amp;nbsp;GUIs.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python has a host of libraries for building GUIs. There&amp;#8217;s the &lt;a class="reference external" href="https://www.gtk.org/A"&gt;&lt;span class="caps"&gt;GTK&lt;/span&gt;&lt;/a&gt; library. My personal favorite, the &lt;a class="reference external" href="https://www.qt.io/"&gt;Qt&lt;/a&gt; framework (especially the &lt;a class="reference external" href="https://riverbankcomputing.com/software/pyqt/intro"&gt;PyQt&lt;/a&gt; bindings of the Qt framework). The Python standard library also has &lt;a class="reference external" href="https://docs.python.org/3/library/tk.html"&gt;tkinter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GUIs are used to build just about anything, and most normal people would look at you funny if you told them a program needed to be run from the terminal. The only thing that has surpassed them in popularity has&amp;nbsp;been&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Web&amp;nbsp;Pages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could argue this one, but the truth is a lot of applications today are created to be served as a web page. The web page has become a standard user interface&amp;nbsp;paradigm.&lt;/p&gt;
&lt;p&gt;The standard stack for a client side webpage uses html (words and format), &lt;span class="caps"&gt;CSS&lt;/span&gt; (styling), and JavaScript (dynamic&amp;nbsp;scripting).&lt;/p&gt;
&lt;p&gt;If you want to build something programmatic on a web page, you need to program in JavaScript. Or at least for the client (user facing) side. On the backside/server-side&amp;#8230; Different&amp;nbsp;story.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; or &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; are two web frameworks for python. &lt;tt class="docutils literal"&gt;Django&lt;/tt&gt; is a bit more full featured with database model helper classes built in, while &lt;tt class="docutils literal"&gt;flask&lt;/tt&gt;, as a micro framework, is much less&amp;nbsp;opinionated.&lt;/p&gt;
&lt;p&gt;I would recommend looking into a static site generator such as &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;pelican&lt;/a&gt; if you&amp;#8217;re looking at creating something that just needs to be&amp;nbsp;read.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; are also a great way to deliver content via the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;Web pages are a very common way to deliver an application experience. They are arguably the most cross-platform and consistent user&amp;nbsp;experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="knowledge-application"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Knowledge&amp;nbsp;Application&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So how does this information help you? We&amp;#8217;ve covered the major types of client-side interfaces. If you wanted some inspiration for projects, but want to minimize the user interface portions of your programming, I might suggest researching existing &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s that sound interesting or implement your own. Want something a little bit more discoverable and easy to navigate, but still in the terminal (maybe a low usage application)? TUIs, my friend. Need to create something that others will use on the computer? Maybe get into some &lt;span class="caps"&gt;GUI&lt;/span&gt; programming. Bowing down to the overwhelming web pressure? Well go learn some JavaScript for your client-side needs. But if it&amp;#8217;s a back-end you need, maybe &lt;tt class="docutils literal"&gt;flask&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;django&lt;/tt&gt; can save&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;The point is to help provide a little bit of information into the terminology and types of programming applications, so that when you want to make your programming chair, you&amp;#8217;re a little more knowledgable about where to go&amp;nbsp;searching.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Random"></category></entry><entry><title>PyQt Hello World Application</title><link href="https://benhoff.net/pyqt-hello-world-application.html" rel="alternate"></link><published>2017-06-16T13:27:00-05:00</published><updated>2017-06-16T13:27:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-16:/pyqt-hello-world-application.html</id><summary type="html">&lt;p class="first last"&gt;Creating the hello world app of desktop&amp;nbsp;applications.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting&amp;nbsp;Started&lt;/h2&gt;
&lt;p&gt;This is the first step in the &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;PyQt Tutorial series&lt;/a&gt;!&amp;nbsp;Welcome!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to start with a hello world application, as sometimes getting everything installed and working correctly can be an emotionally terrifying experience. Just ask me. I&amp;#8217;ve done software&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;So starting from&amp;nbsp;nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-python"&gt;
&lt;h2&gt;Install&amp;nbsp;Python&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python-guide-pt-br.readthedocs.io/en/latest/starting/installation/"&gt;Follow these installation instructions&lt;/a&gt;, based on your &lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re running a linux distribution, you can likely use your native package&amp;nbsp;manager.&lt;/p&gt;
&lt;p&gt;Make sure if you&amp;#8217;re running Windows that you add Python to your path library. It should be a pop-up option during the install. If you mess up, &lt;cite&gt;turn to Google&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you install Python 3. This tutorial will not be for &lt;a class="reference external" href="https://pythonclock.org/"&gt;Python 2&lt;/a&gt; as Python 2 is reaching it&amp;#8217;s end of life for official&amp;nbsp;support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-working-directory"&gt;
&lt;h2&gt;Create A Working&amp;nbsp;Directory&lt;/h2&gt;
&lt;p&gt;Create a directory you want to work out&amp;nbsp;of.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir pyqt
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; pyqt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-virtual-environment"&gt;
&lt;h2&gt;Create Virtual&amp;nbsp;Environment&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;re going to create and activate a virtual environment, so that your global site-packages stay clean. Hard to keep track of which project, installed which dependencies,&amp;nbsp;otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv &amp;lt;DIR&amp;gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &amp;lt;DIR&amp;gt;/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-pyqt5"&gt;
&lt;h2&gt;Install&amp;nbsp;PyQt5&lt;/h2&gt;
&lt;p&gt;Right, now that our virtual environment is activated, let&amp;#8217;s install&amp;nbsp;PyQt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install PyQt5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-the-framework"&gt;
&lt;h2&gt;Build the&amp;nbsp;Framework&lt;/h2&gt;
&lt;p&gt;Now, fire up your favorite text editor, it&amp;#8217;s time to start programming. Create a file named &lt;cite&gt;__main__.py&lt;/cite&gt; and add the following to&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# file name: __main__.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="write-pyqt-specific-code"&gt;
&lt;h2&gt;Write PyQt Specific&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Now, in our main function, we&amp;#8217;re going to create an instances of &lt;a class="reference external" href="http://doc.qt.io/qt-5/qapplication.html"&gt;QApplication&lt;/a&gt; and &lt;a class="reference external" href="http://doc.qt.io/qt-5/qmainwindow.html"&gt;QMainWindow&lt;/a&gt;. I&amp;#8217;d recommend reading the &lt;a class="reference external" href="http://doc.qt.io/qt-5/qapplication.html#details"&gt;documentation&lt;/a&gt; on &lt;tt class="docutils literal"&gt;QApplication&lt;/tt&gt;, especially the section with the &lt;em&gt;main areas of responsibility&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t get there, the &lt;span class="caps"&gt;TLDR&lt;/span&gt; on &lt;tt class="docutils literal"&gt;QApplication&lt;/tt&gt; responsibilities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;event&amp;nbsp;handling&lt;/li&gt;
&lt;li&gt;main&amp;nbsp;settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;QMainWindow&lt;/tt&gt; is a magical class. It gives a lot of normal desktop interface aspects that you&amp;#8217;ve come to expect, such as a menu bar, tool bars, and status bars&amp;#8230; &lt;em&gt;for free&lt;/em&gt;. Again, the &lt;a class="reference external" href="http://doc.qt.io/qt-5/qmainwindow.html#details"&gt;documentation is awesome&lt;/a&gt;, but check out the below figure to get a hint for the types of functionality that are integrated into the &lt;tt class="docutils literal"&gt;QMainWindow&lt;/tt&gt; class.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="http://doc.qt.io/qt-5/images/mainwindowlayout.png" /&gt;
&lt;p class="caption"&gt;Notice that the Menu Bar and Status Bar are tied to QMainWindow. We&amp;#8217;ll come back to&amp;nbsp;that.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So now that we now a little bit about what we&amp;#8217;re doing, let&amp;#8217;s write the rest of the code. The entire source script is available &lt;a class="reference external" href="https://github.com/benhoff/blog/blob/master/scripts/pyqt-hello-world.py"&gt;at this link&lt;/a&gt; as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# file name: __main__.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# We need to make the QApplication before our QMainWindow&lt;/span&gt;
    &lt;span class="c1"&gt;# We also need to pass in our system argument values (sys.argv)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# QMainWindow requires a central widget, so we&amp;#39;ll just pass in a&lt;/span&gt;
    &lt;span class="c1"&gt;# blank widget for now&lt;/span&gt;
    &lt;span class="n"&gt;blank_widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank_widget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Show our main window&lt;/span&gt;
    &lt;span class="n"&gt;main_window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Start the event loop processing&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- TODO Get photo evidence --&gt;
&lt;p&gt;That&amp;#8217;s it! You should see a small window open up. We&amp;#8217;ve got the &amp;#8220;Hello World&amp;#8221; version for &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;The next step is to talk about &lt;a class="reference external" href="https://benhoff.net/qt-interface-design.rst"&gt;choices for our central widget design&lt;/a&gt;, but if you&amp;#8217;re an advanced PyQt programmer already, you can checkout &lt;a class="reference external" href="https://benhoff.net/pyqt-tutorial.rst"&gt;this high level overview&lt;/a&gt; of the tutorial series to jump around to the topic you&amp;nbsp;need.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyQt"></category></entry><entry><title>Software Engineering</title><link href="https://benhoff.net/on-software-engineering.html" rel="alternate"></link><published>2017-06-15T09:05:00-05:00</published><updated>2017-06-15T09:05:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-15:/on-software-engineering.html</id><summary type="html">&lt;p class="first last"&gt;Hiring differences between being a Software Engineer and Computer&amp;nbsp;Scientist&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The other day, I ran into the idea of &lt;a class="reference external" href="http://sijinjoseph.com/programmer-competency-matrix/"&gt;The Programmer Competency Matrix&lt;/a&gt;. Which as I scrolled through the various categories and read the various rows I realized: Wow. I am not very&amp;nbsp;competent.&lt;/p&gt;
&lt;p&gt;Except for Software&amp;nbsp;Engineering.&lt;/p&gt;
&lt;p&gt;I am level 3 in all categories of Software Engineering except for testing, where I&amp;#8217;m a solid two (&lt;span class="caps"&gt;UI&lt;/span&gt; testing would be new to me). I would probably be a Level 1 in all Computer Science&amp;nbsp;categories.&lt;/p&gt;
&lt;p&gt;And I&amp;#8217;m completely &lt;span class="caps"&gt;OK&lt;/span&gt; with&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had a lot of folks ask me while I was &lt;a class="reference external" href="https://www.youtube.com/channel/UChWbNrHQHvKK6paclLp7WYw"&gt;live streaming&lt;/a&gt; heavily how to get better at programming. And if this matrix is any indication, I&amp;#8217;m the wrong person to&amp;nbsp;ask.&lt;/p&gt;
&lt;p&gt;Now I think the question they were really asking is how do I feel more comfortable navigating my programming language&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt; or be better at integrating third party&amp;nbsp;libraries&amp;#8230;&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;if&lt;/em&gt; the question they were asking is how do I better prepare myself to get hired, I would respond with the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software&amp;nbsp;Engineering&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a (now) &lt;em&gt;working&lt;/em&gt; Mechanical Engineer, very little of my day job requires engineering. I&amp;#8217;m working in supplying spare parts, which is the perfect physical analogy to maintaining existing systems. My only job is to not break it and keep it running. The design engineering has already been&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;I would argue that most software jobs are similar. Keep the system running and don&amp;#8217;t break&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;And when you&amp;#8217;re trying to do that, documentation and process become the most important steps. What is this? Why did it break? When I fix it, will someone else understand what I did? Additional software engineering terms, how do I commit changes? Who approves them? What testing needs to be done? Or types of tests&amp;nbsp;written?&lt;/p&gt;
&lt;p&gt;These types of questions will take up more than binomial or Fibonacci heaps [data structures, level&amp;nbsp;3].&lt;/p&gt;
&lt;p&gt;What do you think about the debate of Software Engineering vs Computer Scientist? Let me know in the comments&amp;nbsp;below.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Flashing Beaglebone Black</title><link href="https://benhoff.net/flashing-beaglebone-black.html" rel="alternate"></link><published>2017-06-12T19:51:00-05:00</published><updated>2017-06-12T19:51:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-12:/flashing-beaglebone-black.html</id><summary type="html">&lt;p class="first last"&gt;Trails and tribulations of trying to bring a Beaglebone black up to the latest&amp;nbsp;kernel.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s update a &lt;a class="reference external" href="https://beagleboard.org/black"&gt;beaglebone black&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I need to flash the&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;So &lt;a class="reference external" href="https://beagleboard.org/latest-images"&gt;downloading&lt;/a&gt; the latest image from the repository, I need to unpack the&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; unxz bone-debian-X.X-iot-armhf-YYYY-MM-DD-4gb.img.xz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, now I&amp;#8217;ve got the uncompressed&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lsblk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shows the &lt;span class="caps"&gt;SD&lt;/span&gt; card I&amp;#8217;ve just plugged in as&amp;nbsp;/dev/sdc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo mount /dev/sdc /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then let&amp;#8217;s write our&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo dd if=bone-debian*.img of=/dev/sdc bs=512 status=progress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Believe me, that little &amp;#8216;status=progress&amp;#8217; bit is a life saver. Otherwise you have no idea how long it&amp;#8217;s going to take. I also don&amp;#8217;t know how to kill dd without pulling out the&amp;nbsp;drive.&lt;/p&gt;
&lt;p&gt;The last two sentences are&amp;nbsp;related.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m following &lt;a class="reference external" href="http://derekmolloy.ie/write-a-new-image-to-the-beaglebone-black/"&gt;this&lt;/a&gt; blog post by the way.
Since you&amp;#8217;re going to be awhile.
My image size was 4 gigabytes with a transfer speed of ~6&amp;nbsp;megabytes/second.&lt;/p&gt;
&lt;p&gt;And it died. 13 minutes of waiting&amp;#8230; Ok. Let&amp;#8217;s try again. (&lt;a class="reference external" href="http://guichaz.free.fr/iotop/"&gt;Iotop&lt;/a&gt; will show you if the copy is still&amp;nbsp;working)&lt;/p&gt;
&lt;p&gt;Died again. 3rd times the charm.
Nope. Ok on to something else. Normally I&amp;#8217;d just go get a new &lt;span class="caps"&gt;SD&lt;/span&gt; card, but I&amp;#8217;m transferring this through like 3 adapters and it&amp;#8217;s been known to give me issues in the&amp;nbsp;past.&lt;/p&gt;
&lt;p&gt;Stack Exchange to the rescue. According to &lt;a class="reference external" href="https://unix.stackexchange.com/questions/180330/resuming-a-dd-of-an-entire-disk"&gt;this post&lt;/a&gt; I should just be able to resume where I left off.&amp;nbsp;Neat.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll want to seek and skip. The output of should look something like&amp;nbsp;this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;6963200+0 records in&lt;/span&gt;
&lt;span class="go"&gt;6963200+0 records out&lt;/span&gt;
&lt;span class="go"&gt;3565158400 bytes (3.6 GB, 3.3 GiB) copied, 732.023 s, 4.9 MB/s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll want to use the records for the seek and skip variables referenced&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;However, after some serious heartache, it looks like my dd just didn&amp;#8217;t terminate correctly, and everything was&amp;nbsp;written.&lt;/p&gt;
&lt;p&gt;So now, holding down the boot button, waiting for the buttons to start flashing the heartbeat pattern, and it looks like we&amp;#8217;re in&amp;nbsp;business.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh debian@192.168.7.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The password was in the banner for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Now on to &lt;a class="reference external" href="http://kacangbawang.com/beagleboneblack-revc-debloat-part-1/"&gt;demucking&lt;/a&gt; the&amp;nbsp;install.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Mailing List Woes</title><link href="https://benhoff.net/mailing-list-woes.html" rel="alternate"></link><published>2017-06-12T16:01:00-05:00</published><updated>2017-06-12T16:01:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-12:/mailing-list-woes.html</id><summary type="html">&lt;p class="first last"&gt;Figuring out how to add a mailing&amp;nbsp;list.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s add a mailing&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;So I know I&amp;#8217;ve got &lt;a class="reference external" href="https://www.mailgun.com"&gt;Mailgun&lt;/a&gt; use for &lt;a class="reference external" href="http://benhoff.net/adding-discourse-comments.html"&gt;Discourse&lt;/a&gt; (used for forum comments). Looking into the Mailgun documentation, I can see that there&amp;#8217;s an actual &lt;a class="reference external" href="https://documentation.mailgun.com/en/latest/api-mailinglists.html"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; for a mailing list. However the documentation shows Mailgun&amp;#8217;s implementation is more of a backend deal. Which would be fine if I had a dynamic application, but since I&amp;#8217;m dealing with static pages, this is a major&amp;nbsp;hangup.&lt;/p&gt;
&lt;p&gt;So my next option is to search for a look for either an already existing solution or host my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;This is a mailing list. I could build one with sqlite and python in like 5 minutes. And it would be&amp;nbsp;awful.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by looking to see what I can host&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;After some google searching, it looks like the only open source version is &lt;a class="reference external" href="https://www.gnu.org/software/mailman/"&gt;Mailman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got a confession to make. I&amp;#8217;ve tried to get Mailman up and running before. It didn&amp;#8217;t go very well. Mailman is a mailing list manager. It provides a way to see past emails, navigate replies, and search. Mailman does not provide a way to actually send emails. You have to hook either Postfix or something else up to actually get it up and&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;Also the other thing is, I&amp;#8217;ve already got a full up forum with Discord. And right now, that forum is consuming 1 of 1 gigabytes of data that the Digital Ocean instance provides me. And I don&amp;#8217;t want to upsize the&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;So now I&amp;#8217;m back to using a hosted service. A couple of blogs recommended using &lt;a class="reference external" href="https://www.aweber.com/"&gt;Aweber&lt;/a&gt;, who I&amp;#8217;ve never heard of, but I&amp;#8217;m going to stick with &lt;a class="reference external" href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt;, mostly because I&amp;#8217;ve heard of them&amp;nbsp;actually.&lt;/p&gt;
&lt;p&gt;So signed up, started building a mailing list, got the html code to put into the site&amp;#8217;s template. Which is perfect. I&amp;#8217;ll eventually work towards sending out weekly &amp;#8220;round-up&amp;#8221; emails. Just a simple email that lays out all the articles so you don&amp;#8217;t have to visit the site to see what I&amp;#8217;m writing&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;But there&amp;#8217;s some pieces I need to figure out. Since I&amp;#8217;ve got my own domain and a transactional mailing agent with Mailgun, I should be able to actually receive emails at the domain. As in: &lt;a class="reference external" href="mailto:ben&amp;#64;benhoff.net"&gt;ben&amp;#64;benhoff.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I set up a few referral rules at Mailgun, but it&amp;#8217;s a little dicey currently. I&amp;#8217;ve gotten a few emails, but not all of them. I&amp;#8217;m not sure what&amp;#8217;s wrong, but I think it has something to do with the &lt;span class="caps"&gt;DNS&lt;/span&gt;&amp;nbsp;records.&lt;/p&gt;
&lt;p&gt;If you have ever experienced or might now what&amp;#8217;s going on, feel free to comment below and point me in some resources. Otherwise, I&amp;#8217;ll dive into it later and post another article detailing the&amp;nbsp;fix.&lt;/p&gt;
</content><category term="Blog"></category></entry><entry><title>Blog Tech Stack</title><link href="https://benhoff.net/blog-tech-stack.html" rel="alternate"></link><published>2017-06-12T08:34:00-05:00</published><updated>2017-06-12T08:34:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-12:/blog-tech-stack.html</id><summary type="html">&lt;p class="first last"&gt;Reviewing the tech stack and hosting services I&amp;#8217;m using for the&amp;nbsp;blog.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As I&amp;#8217;m looking to start up a mailing service I thought it be interesting to talk about the services I&amp;#8217;m using for hosting this blog. I&amp;#8217;ll do it in chronological order. Kind&amp;nbsp;of.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Service Type&lt;/th&gt;
&lt;th class="head"&gt;Software/Provider&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Static Site Generator&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelcian&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Static Site Host&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Comments/Forum&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Dynamic Content Host &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://m.do.co/c/2fdf30b46683"&gt;Digital Ocean&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Domain Registration/&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://domains.google/#/"&gt;Google Domains&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Transactional Email &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.mailgun.com/"&gt;Mailgun&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mailing List&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Used for hosting the discourse instance&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Transactional email is, according to &lt;a class="reference external" href="https://blog.mailchimp.com/what-is-transactional-email/"&gt;Mailchimp&amp;#8217;s Docs&lt;/a&gt;, an email sent to an individual based on some action. Discourse uses it for signups, which is why I needed it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Blog"></category></entry><entry><title>Adding Discourse Comments</title><link href="https://benhoff.net/adding-discourse-comments.html" rel="alternate"></link><published>2017-06-10T14:25:00-05:00</published><updated>2017-06-10T14:25:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-10:/adding-discourse-comments.html</id><summary type="html">&lt;p class="first last"&gt;Working through adding Discourse Comments to the&amp;nbsp;blog.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Alright, here we go. Let&amp;#8217;s add comments to my static site. I waited until the weekend because I knew it was going to be a&amp;nbsp;pain.&lt;/p&gt;
&lt;p&gt;So following the directions, I created a digital ocean droplet, and copied the github repo&amp;nbsp;over.&lt;/p&gt;
&lt;p&gt;This was relatively easy for me. Had some issue with path wrangling, but got it figured out eventually. Github wants to ask for your github username weirdly when doing a git clone if you do it incorrectly. Eventually I just changed into the directory I wanted the repo and did the clone from there. Feel like I shouldn&amp;#8217;t have to do that, but&amp;nbsp;whatever.&lt;/p&gt;
&lt;p&gt;Ok, so now I need email.&amp;nbsp;Damn.&lt;/p&gt;
&lt;p&gt;Well let&amp;#8217;s stick with mailgun, since that sounds&amp;nbsp;familiar.&lt;/p&gt;
&lt;p&gt;So I signed up for mailgun, but now I need a domain and a &lt;span class="caps"&gt;DNS&lt;/span&gt;&amp;nbsp;provider.&lt;/p&gt;
&lt;p&gt;So I signed up for a domain on Google. &lt;cite&gt;benhoff.net&lt;/cite&gt;. Old school.&amp;nbsp;Perfect.&lt;/p&gt;
&lt;p&gt;Just remembered that a domain and a &lt;span class="caps"&gt;DNS&lt;/span&gt; provider are different. Wonder if google will act as a &lt;span class="caps"&gt;DNS&lt;/span&gt; provider. I&amp;#8217;m swimming in unknown territory&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Ok, I need to add &lt;span class="caps"&gt;DNS&lt;/span&gt; records for sending according to&amp;nbsp;mailgun.&lt;/p&gt;
&lt;p&gt;Uhh, I don&amp;#8217;t know what I&amp;#8217;m doing. Luckily there&amp;#8217;s this blogpost. &lt;a class="reference external" href="http://www.curtismlarson.com/blog/2015/04/12/github-pages-google-domains/"&gt;http://www.curtismlarson.com/blog/2015/04/12/github-pages-google-domains/&lt;/a&gt;
What an annoying pop up&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Ok, I followed the directions to add the custom resource records from my google name to my google domain. According to the blog, it should take about a day to&amp;nbsp;resolve.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t think this solves my mailgun issue&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;A little google fu: &lt;a class="reference external" href="https://stackoverflow.com/questions/37864807/setting-up-google-domains-dns-to-work-with-mailgun-mx-records"&gt;https://stackoverflow.com/questions/37864807/setting-up-google-domains-dns-to-work-with-mailgun-mx-records&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looks like I need to add a subdomain as a &lt;span class="caps"&gt;MX&lt;/span&gt;&amp;nbsp;record.&lt;/p&gt;
&lt;p&gt;So under Custom Resource records, I&amp;#8217;m going to add the name &lt;cite&gt;mg&lt;/cite&gt;, with the type &lt;cite&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/cite&gt; and add the &lt;cite&gt;mxa.mailgun.org&lt;/cite&gt; and &lt;cite&gt;mxb.mailgun.org&lt;/cite&gt;. Looks like google automagically adds a 10 and a period to the end of&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Cool, so now that I&amp;#8217;ve done that, I&amp;#8217;ve added the domain &lt;cite&gt;mg.benhoff.net&lt;/cite&gt; to the mailgun&amp;nbsp;side.&lt;/p&gt;
&lt;p&gt;Now I need to add everything&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;From this site: &lt;a class="reference external" href="http://code.krister.ee/mailgun-digitalocean/"&gt;http://code.krister.ee/mailgun-digitalocean/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looks like I just keep adding these to the custom resource&amp;nbsp;records.&lt;/p&gt;
&lt;p&gt;I added email.mg &lt;span class="caps"&gt;CNAME&lt;/span&gt; to point to mailgun.org, and a krs._domainkey.mg to point to a really long string. By clicking the authorize, looks like everything&amp;nbsp;worked.&lt;/p&gt;
&lt;p&gt;All right, back to the discourse&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll launch the setup tool. Setup wants to create a 2 gig swap file. Fine by me. Following the defaults for mailgun set by: &lt;a class="reference external" href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-email.md"&gt;https://github.com/discourse/discourse/blob/master/docs/&lt;span class="caps"&gt;INSTALL&lt;/span&gt;-email.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now it asks for let&amp;#8217;s encrypt account email? Hmm, let&amp;#8217;s set that up real&amp;nbsp;quick.&lt;/p&gt;
&lt;p&gt;Just enter an email and press enter, and everything will be&amp;nbsp;encrypted.&lt;/p&gt;
&lt;p&gt;Discourse is now updating which is&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;I lost internet, but looks like everything worked fine.&amp;nbsp;Perfect.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll add the &lt;span class="caps"&gt;CNAME&lt;/span&gt; to the custom resource records. Whoops, looks that&amp;#8217;s not how to do&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I need to add it as a &amp;#8216;A&amp;#8217; resource and fix the domain name in my setup and rebuild the app using &lt;cite&gt;./launch rebuild app&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Sick. I&amp;#8217;ll add in some other fancy stuff, like Facebook, Google, Twitter, and Github&amp;nbsp;logins.&lt;/p&gt;
&lt;p&gt;Now onto embedding. I&amp;#8217;m following this: &lt;a class="reference external" href="https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963"&gt;https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The admin tab has a customize section. From there to embedding. Add the domain name and I&amp;#8217;ve got some html. Adding it to the theme of the article template and I should be&amp;nbsp;set.&lt;/p&gt;
&lt;p&gt;Fingers&amp;nbsp;crossed.&lt;/p&gt;
</content><category term="Blog"></category></entry><entry><title>Fixing My Issue With Github Stars</title><link href="https://benhoff.net/remembering-github-stars.html" rel="alternate"></link><published>2017-06-09T08:11:00-05:00</published><updated>2017-06-09T08:11:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-09:/remembering-github-stars.html</id><summary type="html">&lt;p class="first last"&gt;How I fixed a long term issue with how I star repositories on&amp;nbsp;Github&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I’ve got this weird&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;I don’t remember why I’ve starred the things I’ve starred on Github. It’s gotten so bad in fact, that I’ll often be browsing an interesting Github repo on a topic I’m interested in, go to bookmark it, and realize that I already&amp;nbsp;have.&lt;/p&gt;
&lt;p&gt;Doh!&lt;/p&gt;
&lt;p&gt;The real issue is that the reason I bookmark repo’s is for a very specific purpose. For example, a lot of the bot code that I follow is because I’m interested in how different bots parse and handle incoming messages or&amp;nbsp;events.&lt;/p&gt;
&lt;p&gt;I mean, in my head, it’s probably something as simple as pushing it onto a queue and then using a worker thread to work through the tasks. But what if it’s&amp;nbsp;different?&lt;/p&gt;
&lt;p&gt;Part of the reason I started working on Vexbot was because I was interested in a universal interface to anything. I wanted to take and plug into random services (Youtube, Irc, etc) and have them all run through a common parsing/bot system. So far, I’ve created the only bot that I’ve seen that uses subproccesses for each individual&amp;nbsp;adapter.&lt;/p&gt;
&lt;p&gt;But I’m always curious about what others have done to tackle this problem, so I bookmark other bots to go check out how they do it.
Except I never do. And then browsing through my list of stars (which I rarely do) I can never remember why I bookmarked&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;So let’s fix&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I’ll create a github repo targeted at remembering why I starred the things I stared. By using a Readme file, I’ll only have to visit the main repo page. Plus very thing is version controlled and nice. Something that would be nice would be to create a bot that periodically polls my starred list and creates an issue or a pull request so that I don’t get lazy, but let’s not get ahead of&amp;nbsp;ourselves.&lt;/p&gt;
&lt;p&gt;So hold my beer. Here I&amp;nbsp;go.&lt;/p&gt;
</content><category term="random"></category></entry><entry><title>Bash String Subsitution</title><link href="https://benhoff.net/bash-string-substitution.html" rel="alternate"></link><published>2017-06-08T13:19:00-05:00</published><updated>2017-06-08T13:19:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-08:/bash-string-substitution.html</id><summary type="html">&lt;p class="first last"&gt;Learning how to do string substitution in bash&amp;nbsp;commands&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A little personal confession: I&amp;#8217;m really bad at the command line. And by bad, I mean willfully ignorant. I often know there&amp;#8217;s a better way to work in the command line and I often don&amp;#8217;t learn how to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For example, one of the little tricks that has saved me a lot of time is the use of the double exclamation marks to redo and edit a&amp;nbsp;command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pacman -S interesting-package
&lt;span class="go"&gt;error: you cannot perform this operation unless you are root&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; sudo !!
&lt;span class="go"&gt;sudo pacman -S interesting-package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the double exclamation marks will save you from retyping all of the things when you forget something simple like a sudo. It&amp;#8217;s saved my sanity many a&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;One example of my willful ignorance, is with misspelling things on the command&amp;nbsp;line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git comit -m &lt;span class="s1"&gt;&amp;#39;really long commit message&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;git: &amp;#39;comit&amp;#39; is not a git command. See &amp;#39;git --help&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;The most similar command is&lt;/span&gt;
&lt;span class="go"&gt;        commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dammit. Up until today, I&amp;#8217;ve pressed the up arrow to bring the command back up, then used the left arrow to navigate all the way back to my mistake before fixing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The crazy thing is I know there&amp;#8217;s a way to do a simple string substitution. I&amp;#8217;ve just been too lazy to look it&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Until today. Today, with the use of Google, I become a power&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;As a vim user this is the syntax that I&amp;#8217;ll&amp;nbsp;remember.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; !!:s/comit/commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, if you&amp;#8217;ve invested in a saner text editor, a simpler syntax&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ^comit^commit^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if only I could remember the way to navigate to the beginning of a command line (&lt;cite&gt;Ctl-e?&lt;/cite&gt;&amp;#8230;. &lt;cite&gt;Ctl-a?&lt;/cite&gt;)&lt;/p&gt;
&lt;p&gt;or learn how to use my bash&amp;nbsp;history&amp;#8230;.&lt;/p&gt;
&lt;p&gt;Well there&amp;#8217;s always&amp;nbsp;tomorrow.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Blog Implementation Stream of Conscious</title><link href="https://benhoff.net/blog-implementation.html" rel="alternate"></link><published>2017-06-04T21:27:00-05:00</published><updated>2017-06-04T21:27:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-04:/blog-implementation.html</id><summary type="html">&lt;p class="first last"&gt;Starting implementation of the blog as a work in&amp;nbsp;progress.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s start implementing a&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;First off, let&amp;#8217;s get the Github Pages up&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Going to &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages site&lt;/a&gt; gives the&amp;nbsp;instructions.&lt;/p&gt;
&lt;p&gt;I need to create a repository named after my username and push the repo. Easy enough. Next I need to create an index.html file. Github recommends &amp;#8220;hello world&amp;#8221;. Sounds good to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Using git to add and push my local repo up to the newly created repository. Visiting benhoff.github.io now shows our the new web page, hello world!&amp;nbsp;Neat!&lt;/p&gt;
&lt;p&gt;Cool, now that I&amp;#8217;ve got my page up, on to the static website generation. I&amp;#8217;ll start by installing pelican in a virtual&amp;nbsp;environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir swdev/blog

&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; swdev/blog

&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv venv

&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt;  venv bin activate

&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pelican has a quick start. Hold my breath here&amp;nbsp;;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh man, I need a blog title? Hoff&amp;#8217;s heroes? Let&amp;#8217;s just stick with Ben&amp;#8217;s Blog for now. The only other question I&amp;#8217;m stumped on is the generation of a Fabfile/Makefile. Let&amp;#8217;s say yes for now, and we can always delete it&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Looks like pelican is familiar with using Github pages.&amp;nbsp;Nice.&lt;/p&gt;
&lt;p&gt;Awesome, the quickstart dumped a bunch of new files and folders into the directory. I&amp;#8217;ve already written an initial thoughts post about this blog. Let&amp;#8217;s dump that in the content&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mv initial_blog_thoughts.txt content/initial_blog_thoughts.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m following the content tutorial &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/content.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a bunch of metadata that pelcian says I&amp;#8217;m missing, including the date, tags, category, slug, authors, and summary. Let&amp;#8217;s go ahead and add all of&amp;nbsp;those.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll need to go through and add in some of the resturctured text for the post, but I&amp;#8217;ll do it&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Right now, I want to add in some &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt;. According to Pelican, Pages are for _About_ and _Contact_ pages. That sounds&amp;nbsp;good.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir pages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uh, I thought I could create an &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt;? Doesn&amp;#8217;t look like I can, I&amp;#8217;ll just follow the next step in the tutorial and see where I end&amp;nbsp;up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pelican /path/to/my/content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like the content needs to be the file directory and not the actual&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;Nice, the output directory has an index file in it already. Let&amp;#8217;s check it out using my&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;Ok, I&amp;#8217;m not in love with the theme, but I can work with everything&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s push this up and do it&amp;nbsp;live.&lt;/p&gt;
&lt;p&gt;Ok, not as easy as I would like. We&amp;#8217;re adventuring now. Pelican &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/tips.html"&gt;recommends&lt;/a&gt; the use of &lt;cite&gt;ghp-import&lt;/cite&gt;. I hate this kind of adventuring, since I&amp;#8217;m pretty sure it&amp;#8217;s not going to work. Sigh. Here we&amp;nbsp;go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pip install ghp-import

&lt;span class="gp"&gt;(venv) $&lt;/span&gt; ghp-import output

&lt;span class="gp"&gt;(venv) $&lt;/span&gt; git push git@github.com:benhoff/benhoff.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yea, that didn&amp;#8217;t work. Looks like since I&amp;#8217;ve already pushed I&amp;#8217;m going to have issues. Color me surprised. I swear, this is my surprised&amp;nbsp;face.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve now got a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch. That might be worth looking into. After some digging looks like I need to push the gh-pages&amp;nbsp;branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That didn&amp;#8217;t appear to work. Maybe deleting my old &amp;#8220;hello world&amp;#8221; index file will&amp;nbsp;help.&lt;/p&gt;
&lt;p&gt;Nope. Now we&amp;#8217;re just 404ing. Looks like for a user page, content must be in the master. Well screw that. Let&amp;#8217;s create a new repo for the blog code and then I&amp;#8217;ll just push the github.io pages&amp;nbsp;separate.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New repo named&amp;nbsp;`blog`&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git remote set-url git@github.com:benhoff/blog.git

&lt;span class="gp"&gt;$&lt;/span&gt; git remote add publish git@github.com:benhoff/benhoff.github.io

&lt;span class="gp"&gt;$&lt;/span&gt; git push -f publish gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ll still have to manually push the gh-pages branch, but this is good enough for&amp;nbsp;now.&lt;/p&gt;
</content><category term="Blog"></category><category term="blog"></category><category term="implementation"></category></entry><entry><title>Blog Initial Tech Stack Thoughts</title><link href="https://benhoff.net/blog-tech-stack-thoughts.html" rel="alternate"></link><published>2017-06-04T20:30:00-05:00</published><updated>2017-06-04T20:35:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-04:/blog-tech-stack-thoughts.html</id><summary type="html">&lt;p class="first last"&gt;Walking through the initial tech stack considerations for a new&amp;nbsp;blog.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ok, let&amp;#8217;s start a&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;First of all, we need a tech stack. My initial thoughts are to use a static site generator. None of the blog code needs to be dynamic, and I can import a javascript comment system (such as discus) later. Probably end up using google analytics as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be using either markdown or restructured text so that I can track the blog configuration using&amp;nbsp;git.&lt;/p&gt;
&lt;p&gt;Perfect, so we&amp;#8217;ve got a static site generator, markdown/restructured text, third party analytics and commenting&amp;#8230; now on to hosting. Since I don&amp;#8217;t feel like taking on the hosting thing for now, and the domain name isn&amp;#8217;t important, let&amp;#8217;s just stick with github pages. I&amp;#8217;m pretty sure it&amp;#8217;s&amp;nbsp;free.&lt;/p&gt;
&lt;p&gt;The only other things that I would like would be some responsive design (I primarily read using my smart phone) and some way to embed a jupyter notebook directly in the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll save the responsive design for another day (and a more complicated folder directory as well), but the desire for jupyter notebook means I&amp;#8217;ll probably be using some sort of python stack instead of the (likely more popular) Github incarnation of&amp;nbsp;Jekyll.&lt;/p&gt;
&lt;p&gt;A quick google search shows that Pelican is likely the largest/most supported python static site generator. Looks like it can work with either markdown or restructured text (I&amp;#8217;ll probably stick with restructured text since I&amp;#8217;ve written some &lt;span class="caps"&gt;README&lt;/span&gt;&amp;#8217;s with it). Perfect. Another quick search shows there&amp;#8217;s a plugin that allows for Jupyter-Notebooks to be in embedded. We&amp;#8217;re cooking with fire now. So let&amp;#8217;s review our&amp;nbsp;tech.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Git (version&amp;nbsp;control)&lt;/li&gt;
&lt;li&gt;Resturctured Text (text&amp;nbsp;markup)&lt;/li&gt;
&lt;li&gt;Github Pages (website&amp;nbsp;hosting/Domain)&lt;/li&gt;
&lt;li&gt;Pelican (static site&amp;nbsp;generator)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tech to be implemented later (third party and potentially&amp;nbsp;hard)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Discourse&amp;nbsp;(comments)&lt;/li&gt;
&lt;li&gt;Google Analytics&amp;nbsp;(analytics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awesome, let&amp;#8217;s start&amp;nbsp;implementing.&lt;/p&gt;
</content><category term="Blog"></category><category term="blog"></category><category term="tech"></category><category term="stack"></category></entry></feed>