<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben's Blog - Other</title><link href="https://benhoff.net/" rel="alternate"></link><link href="https://benhoff.net/feeds/other.atom.xml" rel="self"></link><id>https://benhoff.net/</id><updated>2019-12-11T07:50:00-06:00</updated><entry><title>Tensorflow Serving is Dead</title><link href="https://benhoff.net/tensorflow-serving-dead.html" rel="alternate"></link><published>2019-12-11T07:50:00-06:00</published><updated>2019-12-11T07:50:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-12-11:/tensorflow-serving-dead.html</id><summary type="html">&lt;p&gt;Tensorflow Serving is Dead, or at least not being&amp;nbsp;maintained&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of my OpenCV &lt;span class="caps"&gt;CVAT&lt;/span&gt; development, one of the things that I want to focus on is making it easier to develop computer vision models within the platform. There&amp;#8217;s quite a few startups that are also working in this space, but the idea of crowdsourcing labeling/annotation in a single platform and then using that same platform to integrate and train a machine learning model, is powerful. It&amp;#8217;s the vision I was working towards with my last company, and still an interesting&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;As part of that vision, the &lt;span class="caps"&gt;CVAT&lt;/span&gt; platform needs to integrate in some of the top tier machine learning frameworks. &lt;span class="caps"&gt;CVAT&lt;/span&gt; has already integrated in OpenVINO (which is an Intel Deep Learning framework. Actually hilariously, OpenVINO is rebranded &lt;a href="https://github.com/opencv/dldt"&gt;&lt;span class="caps"&gt;DLDT&lt;/span&gt;&lt;/a&gt;). But the next obvious enterprise framework is&amp;nbsp;Tensorflow.&lt;/p&gt;
&lt;p&gt;One important thing from a systems perspective is to separate out your resources, so you don&amp;#8217;t risk breaking your entire system and you can scale different pieces at different rates. So the model integration really needed to be of the microservices brand. Enter stage left: Tensorflow&amp;nbsp;serving.&lt;/p&gt;
&lt;p&gt;Tensorflow serving dockerizes models and allows them to be served via &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; or gRPC. So you can have a fat &lt;span class="caps"&gt;GPU&lt;/span&gt; on a separate server from the &lt;span class="caps"&gt;CVAT&lt;/span&gt; instance, plugging away, training the best inference possible. This is perfect for &lt;span class="caps"&gt;CVAT&lt;/span&gt;&amp;#8217;s use&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only one slight hangup. Tensorflow has recently transitioned into Tensorflow 2.0, an &lt;span class="caps"&gt;API&lt;/span&gt; breaking upgrade. This has (as &lt;span class="caps"&gt;API&lt;/span&gt; breaks always do), thrown the entire ecosystem into chaos. But it has shown some light on an interesting&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Tensorflow Serving is Dead. Or at least, not being actively&amp;nbsp;maintained.&lt;/p&gt;
&lt;p&gt;See part of the upgrades to Tensorflow 2.0 was to remove the &lt;code&gt;contrib&lt;/code&gt; module, a top level module that used a very popular Tensorflow library known as Slim. This breaks Tensorflow Serving&amp;#8217;s examples. See &lt;a href="https://github.com/tensorflow/serving/issues/1475"&gt;here&lt;/a&gt;. No big deal though, software is flexible and can heal right? Well, only if you keep development resources on the project. Two perspective pull fixes, both &lt;a href="https://github.com/tensorflow/serving/pull/1477"&gt;one of mine&lt;/a&gt; and &lt;a href="https://github.com/tensorflow/serving/pull/1486"&gt;someone else&amp;#8217;s&lt;/a&gt; have gone unmerged or commented for 30+ days. The last pull request accepted was September 11th,&amp;nbsp;2019.&lt;/p&gt;
&lt;p&gt;So Tensorflow Serving is officially dead. Or at least unmaintained at this&amp;nbsp;point.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Encouraging Open Source Contributions</title><link href="https://benhoff.net/encouraging-open-source.html" rel="alternate"></link><published>2019-12-10T21:29:00-06:00</published><updated>2019-12-10T21:29:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-12-10:/encouraging-open-source.html</id><summary type="html">&lt;p&gt;Exploring methods for encouraging Open Source&amp;nbsp;commits&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been committing to OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;. This is for a couple of reasons. As I&amp;#8217;ve gotten into more management and sales positions, I found that I didn&amp;#8217;t have any reasons to keep my technical skills sharp. In fact, what I found with my last roles, is that by trying to commit to projects, I would often cause&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;My coworkers were not thrilled to find out that my code introduced bugs. They also couldn&amp;#8217;t count on me to be technically engaged, because the job pulled me in different directions. Me contributing to our tight turn project ended up being more of a distraction than a help, so I&amp;nbsp;stopped.&lt;/p&gt;
&lt;p&gt;So I set out to find a project that was related to the business space that we were in that I could work on while sharpening my technical skills. Specifically, at the time I was working for a custom services shop, and I was trying to push us to have a few computer vision &lt;span class="caps"&gt;AI&lt;/span&gt; projects. Thus we needed to have solid tools and experience to train the &lt;span class="caps"&gt;AI&lt;/span&gt; against. Bringing us back around to OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Part of what&amp;#8217;s interesting to me is building a community. So now that I&amp;#8217;ve got a few commits into &lt;span class="caps"&gt;CVAT&lt;/span&gt;, including some buggy ones, it&amp;#8217;s been interesting to me to see what works to help foster building a&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve already talked about &lt;a href="https://benhoff.net/paying-for-open-source.html"&gt;trying to pay for open source contributions&lt;/a&gt;. However I&amp;#8217;ve yet to see any traction with that&amp;nbsp;method.&lt;/p&gt;
&lt;p&gt;One thing I do know, is that when people run into problems or have bugs, they are &lt;span class="caps"&gt;HIGHLY&lt;/span&gt; motivated to contribute. Sometimes challenging them to do so is enough to get them started (&lt;a href="https://github.com/opencv/cvat/issues/501#issuecomment-503149106"&gt;it certainly worked on me&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had some limited success with throwing out some high level ideas, linked to code to get successful code submissions. I think this is a decent practice depending on your familiarity with the code and the technical prowess of your consumers. Diagnosing and providing some ideas of how to fix stuff is often easy. It&amp;#8217;s testing and iterating through the solution that becomes&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;So if you are running a similar project, that&amp;#8217;s my suggestion. Challenge people, and if they run into a specific problem, throw them a couple of&amp;nbsp;breadcrumbs.&lt;/p&gt;
&lt;p&gt;You never know who might become a regular contributor to your project this&amp;nbsp;way!&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Paying for Open Source</title><link href="https://benhoff.net/paying-for-open-source.html" rel="alternate"></link><published>2019-11-26T06:40:00-06:00</published><updated>2019-11-26T06:40:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-26:/paying-for-open-source.html</id><summary type="html">&lt;p&gt;Exploring methods for promoting Open&amp;nbsp;Source&lt;/p&gt;</summary><content type="html">&lt;p&gt;I think the first time I saw an Open Source project that was well funded and was using that funding to promote development was NeoVim. NeoVim was a fork of the popular Vim project, focused on reducing the cruft of the project and bringing best practices back in. Whoever was running the project was a marketing genius. He got a ton of press outlining the issues with the Vim project. But the key difference between him and a thousand of other people complaining about projects is that he launched an alternative &lt;em&gt;and asked for money&lt;/em&gt;. This is how I got introduced to &lt;a href="https://www.bountysource.com/"&gt;BountySource&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The BountySource idea is simple. Give money against (typically) GitHub issues to promote development for fixes. Bounties can be pooled so that interested individuals can pool money together. Some of the bounties are quite large, in the $5K realm and &lt;span class="caps"&gt;IBM&lt;/span&gt; has awarded $470,000+ dollars on the platform. Now these two data points are by far the outliers. The platform itself hasn&amp;#8217;t really caught on in a substantial way. There are 5-8 projects in the $5K realm which are deeply technical lifts, and the next largest businesses are Ripple coin and Elementary with $37K and $27K&amp;nbsp;respectively.&lt;/p&gt;
&lt;p&gt;NeoVim itself looks like it&amp;#8217;s focused on funding an individual developer or project maintenance over funding individual issues. I seem to remember in the early days that they were funding individual issues. I&amp;#8217;m guessing the lag between putting money down and actual implementations was too large. Especially for bug fixes, this seems like an unwise&amp;nbsp;strategy.&lt;/p&gt;
&lt;p&gt;For my own personal use, I&amp;#8217;ve been interested in throwing some small cash sums around to get a feel for different approaches. My pet project lately has been &lt;a href="https://benhoff.net/developing-cvat.html"&gt;OpenCV&amp;#8217;s &lt;span class="caps"&gt;CVAT&lt;/span&gt;&lt;/a&gt;. Because &lt;span class="caps"&gt;CVAT&lt;/span&gt; has been blending in Machine Learning into the user interface, it&amp;#8217;s a cool sell. You can show people the platform itself and the neat things it can&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;I wanted to continue to increase the magicalness of the platform, so I put &lt;a href="https://www.bountysource.com/issues/70724425-intelligent-scissors"&gt;$100 on BountySource&lt;/a&gt; against some &lt;a href="https://github.com/opencv/cvat/issues/336"&gt;intelligent scissors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nobody has bitten off on the project. I&amp;#8217;m guessing there&amp;#8217;s a couple of issues, one of which is that the dollar value is low for the platform. The other of which is I haven&amp;#8217;t done any marketing. BountySource doesn&amp;#8217;t seem like a large enough of a platform to drive implementations for that low of a price point. And at least for United States development labor, the cost is probably a bit low. I would guess that patch would take somewhere between 4-32 hours to implement, depending on the developer. That&amp;#8217;s probably not costing time for setting up a development environment with a new project. Assuming $50/hour, it&amp;#8217;s quick to see the price&amp;nbsp;delta.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Visual Debugging from the Command Line</title><link href="https://benhoff.net/command-line-visual-debugging.html" rel="alternate"></link><published>2019-11-24T22:39:00-06:00</published><updated>2019-11-24T22:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-24:/command-line-visual-debugging.html</id><summary type="html">&lt;p&gt;How to visually debug something from the command&amp;nbsp;line&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working with images is interesting. In a previous piece of work, a customer wanted to bring in some semantic segmentation. Semantic Segmentation goes pixel by pixel and assigns probabilities that the pixel belongs to label. You&amp;#8217;ll typically see this in street images, with individual cars, people, bikes, etc being segmented out of the overall picture on a pixel&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;The interesting problem of working with semantic segmentation technologies is working with the outputs. Typically the output of a semantic segmentation model is a list of pixel probabilities. Because it&amp;#8217;s a pixel-by-pixel technology, you end up with probabilities for every single pixel in an image. Combine that with an estimation for each type of class that a pixel can be, and every pixel in an 800 x 600 image suddenly has 50 probabilities associated with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;(There&amp;#8217;s some tech where they use the bounding box to limit the number of pixels passed back (Mask &lt;span class="caps"&gt;RCNN&lt;/span&gt;), but it&amp;#8217;s still a lot of data to work&amp;nbsp;with.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure I&amp;#8217;ve ever figured out a good way to work with multi-layered array data like that contained within pictures. Leave a comment below if you have any&amp;nbsp;hints.&lt;/p&gt;
&lt;p&gt;Since I was working with images though, the nice thing is that you can just, you know, &lt;em&gt;display&lt;/em&gt; the images. After much trail and error, that was the best way I could figure out how to actually iteratively develop semantic segmentation&amp;nbsp;code. &lt;/p&gt;
&lt;p&gt;Interestingly, I&amp;#8217;ve never much cared for how OpenCv handles windows until&amp;nbsp;know.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that `some_numpy_array` is just that, a numpy array&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize the array or image&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My Array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# wait until user presses keys&lt;/span&gt;
&lt;span class="c1"&gt;# Note that without this waitkeys, the window will be created and destroyed before you can notice it&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Do some kind of manipulation here or you could show another picture to compare&lt;/span&gt;
&lt;span class="n"&gt;some_numpy_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_some_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize the array or image again after the changes&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My Array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_numpy_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method cv2.destroyAllWindows() or cv2.destroyWindow(&amp;#8216;your-name-here&amp;#8217;) might be useful depending on the specifics of what you have to visualize. I just reused the existing context/window, but there might be cases where you&amp;#8217;d want to display multiple windows side-by-side or some other&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;This was a funny setup because I was actually building some server code. So as I was debugging, my web server started spitting some Desktop Graphical User Interfaces. While none of this code made it into production, it definitely helped me track down the logic errors in my code and get the result &lt;a href="https://github.com/opencv/cvat/commit/a435b410ede92130ca2bc67a7ae2a60962f6ebef"&gt;submitted up and working correctly&lt;/a&gt;.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Rescuing the Blog</title><link href="https://benhoff.net/rescuing-the-blog.html" rel="alternate"></link><published>2019-11-22T21:39:00-06:00</published><updated>2019-11-22T21:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-22:/rescuing-the-blog.html</id><summary type="html">&lt;p&gt;Getting a project running that I haven&amp;#8217;t touched in&amp;nbsp;awhile&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven&amp;#8217;t blogged in awhile! While I&amp;#8217;ve been keeping up the discourse that&amp;#8217;s attached to the site, the actual blog itself is a different story. The static nature of the site helps keep it maintained, because I don&amp;#8217;t actually have to touch it, until I want to add new&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;One thing that I noticed right away is that I&amp;#8217;ve switched to using Markdown over Restructed text. This is because Github uses Markdown. So this article is being written using Markdown instead of &lt;span class="caps"&gt;RST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The other thing I&amp;#8217;ve learned is that I need to keep idiot proof instructions for how to stand this thing back up after I&amp;#8217;ve been away for awhile. It&amp;#8217;s funny how when you have side projects, the first thing that you notice is that you need a &amp;#8220;look at this stupid!&amp;#8221; text blob for remembering how to get things running&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;My instructions for this project are awful. I&amp;#8217;ve added some updates to remind myself. I was surprised on a fresh install that all the dependencies seem to be working after two years! It seems that chooosing Pelican was a smart&amp;nbsp;choice.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s see if we can&amp;#8217;t push these two articles up and close the&amp;nbsp;loop.&lt;/p&gt;
&lt;p&gt;If I remember the most difficult part with the entire process, it&amp;#8217;s actually in the pushing of the&amp;nbsp;content.&lt;/p&gt;</content><category term="Other"></category></entry><entry><title>Python Extra Requires Woes</title><link href="https://benhoff.net/python-extras-requires.html" rel="alternate"></link><published>2019-11-21T21:39:00-06:00</published><updated>2019-11-21T21:39:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2019-11-21:/python-extras-requires.html</id><summary type="html">&lt;p&gt;Installing extras when running&amp;nbsp;setup.py&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the small things that I always forget or abuse in projects is &amp;#8220;extras_requires&amp;#8221;. In python project &amp;#8220;setup.py&amp;#8221; file, you can drop small hints, or tier out the installation requirements so that users don&amp;#8217;t have to download every single dependency in the world to get your project running. This is achieved by the use of&amp;nbsp;&amp;#8220;extras_requires&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The problem is, I never remember how to install the extras when using my desired installation method&amp;nbsp;of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py develop&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently the only way I know how to do it is to do a &amp;#8220;pip install -e .[my-extras-here]&amp;#8221;. I would like to be able to define the extras requires during development install. I&amp;#8217;ve opened a &lt;a href="https://stackoverflow.com/questions/58986867/use-python-setup-py-to-install-different-dependencies-with-develop-vs-install"&gt;Stackoverflow question&lt;/a&gt; to find out if it&amp;#8217;s possible. But based on some research, I don&amp;#8217;t think there is any way to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll just change the project for now to include all the dependencies for my desired use case. I think the use of &amp;#8220;extras_requires&amp;#8221; for most of my personal projects is probably an&amp;nbsp;anti-pattern.&lt;/p&gt;</content><category term="Other"></category></entry></feed>