<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben's Blog - Random</title><link href="https://benhoff.net/" rel="alternate"></link><link href="https://benhoff.net/feeds/random.atom.xml" rel="self"></link><id>https://benhoff.net/</id><updated>2017-12-28T00:00:00-06:00</updated><entry><title>Using Git Branches With Setuptools</title><link href="https://benhoff.net/using-git-branches-with-setuptools.html" rel="alternate"></link><published>2017-12-28T00:00:00-06:00</published><updated>2017-12-28T00:00:00-06:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-12-28:/using-git-branches-with-setuptools.html</id><summary type="html">&lt;p class="first last"&gt;Want to specify a git dependency in a setup.py? Here&amp;#8217;s&amp;nbsp;how.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I wanted to add a git branch in a dependency for a project of mine in the &lt;cite&gt;setup.py&lt;/cite&gt; file. Should be easy&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Several hours of research later and pinging a project maintainer to bump the version in his branch&amp;nbsp;later&amp;#8230;&lt;/p&gt;
&lt;p&gt;And it&amp;#8217;s actual not too bad once you know how to do it. So let&amp;#8217;s figure out how to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In the &lt;cite&gt;setup&lt;/cite&gt; method of &lt;cite&gt;setup.py&lt;/cite&gt; you need to have two&amp;nbsp;arguments.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install_requires&lt;/li&gt;
&lt;li&gt;dependency_links&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, I was trying to add the &lt;a class="reference external" href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt; 2.0.0 branch to my project (Version 1.0.15 is currently in&amp;nbsp;pypi).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s pick the easy one first, the&amp;nbsp;install_requires.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prompt-toolkit&amp;gt;=2.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This requirement parsing will currently fail due to the fact there isn&amp;#8217;t a prompt-toolkit version greater than or equal to 2.0.0 in pypi. So let&amp;#8217;s fix that by specifying the 2.0.0 branch with in the dependency&amp;nbsp;links.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependency_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git+https://github.com/jonathanslenders/python-prompt-toolkit@2.0#egg=prompt-toolkit-2.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#8217;s a couple of special things about the way this link is written that are poorly documented, and thus worth writing&amp;nbsp;about.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;cite&gt;git+https://github.com/jonathanslenders/python-prompt-toolkit&lt;/cite&gt; -&amp;gt; Standard documented way to install git links using pip. Nothing to see here, just an &lt;span class="caps"&gt;FYI&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;&amp;#64;2.0&lt;/cite&gt; specifies the branch that we want to use. Note that this happens to be a number in this case, but can be whatever branch you need. I.e., &lt;cite&gt;dev&lt;/cite&gt; would be a common interesting branch name that could be used by specifying &lt;cite&gt;&amp;#64;dev&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;#egg=prompt-toolkit-2.0.0&lt;/cite&gt; is the most important bit and worth expounding on a little&amp;nbsp;more.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We need to specify which package this dependency link provides. We do this with the &lt;cite&gt;#egg=PACKAGE_NAME&lt;/cite&gt; syntax. In this case, this dependency link provides the package &lt;cite&gt;prompt-toolkit&lt;/cite&gt;, ie &lt;cite&gt;#egg=prompt-toolkit&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;But the most important part of this portion of a dependency link, and one that isn&amp;#8217;t documented at all, is that you &lt;em&gt;must&lt;/em&gt; provide a version number. I&amp;#8217;ve done this here with the &lt;cite&gt;-2.0.0&lt;/cite&gt;. The version number you provide can be any version, but it must be&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;So for example, if you wanted to specify a dependency on the development version of Vexbot, the dependency link could look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependency_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git+https://github.com/benhoff/vexbot@dev#egg=vexbot-0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;cite&gt;-0&lt;/cite&gt; specifying the version number at the end of the vexbot dependency&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;You can throw in whatever version number you&amp;#8217;d like so that you can help properly guide your user as to what version you really need (like I did with the &lt;cite&gt;install_requires&lt;/cite&gt; constraint on&amp;nbsp;prompt-toolkit).&lt;/p&gt;
&lt;p&gt;Please note that dependency links are useful! You can use them&amp;nbsp;to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Specify a private git repository as a dependency in&amp;nbsp;setup.py&lt;/li&gt;
&lt;li&gt;Specify a patch version of a repository over the package in&amp;nbsp;pypi&lt;/li&gt;
&lt;li&gt;Specify a package that isn&amp;#8217;t published to pypi but is on&amp;nbsp;Github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope that&amp;nbsp;helps!&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Self Hosted Python Anywhere</title><link href="https://benhoff.net/local-python-anywhere.html" rel="alternate"></link><published>2017-10-16T07:22:00-05:00</published><updated>2017-10-16T07:22:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-16:/local-python-anywhere.html</id><summary type="html">&lt;p class="first last"&gt;Working around aggressive workplace&amp;nbsp;firewalls&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I have a great job, but it doesn&amp;#8217;t always fully employ me. Such is life. I still like to be productive, and having a programming hobbies and an office job seems like a match made in&amp;nbsp;heaven.&lt;/p&gt;
&lt;p&gt;Oh, you don&amp;#8217;t have enough things for me to do? But you still want me to be here in case something comes up? No worries team, I gotcha. Totally self&amp;nbsp;entertaining.&lt;/p&gt;
&lt;p&gt;The problem has been that my office&amp;#8217;s aggressive firewall has prevented me from doing anything that doesn&amp;#8217;t come over port 80 or 443. Which I totally get. But c&amp;#8217;mon man. I can only read Reddit so many hours of the&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;But then I found &lt;a class="reference external" href="https://www.pythonanywhere.com/"&gt;Python Anywhere&lt;/a&gt;. The basic premise is that all you need is a web browser and you can be up and coding in no time. I immediately signed up. This was exactly what I was looking for! Up until the point I realized that I can&amp;#8217;t bind to ports. With my main project using zmq, which requires binding to ports, I was super&amp;nbsp;bummed.&lt;/p&gt;
&lt;p&gt;It did however get me thinking that maybe I could use the same program. They had a full fledged terminal in the browser! There was no way that the website author made that program himself. It was too slick. It had to be open&amp;nbsp;sourced.&lt;/p&gt;
&lt;p&gt;After lots of googling I found it. &lt;a class="reference external" href="https://github.com/macton/hterm"&gt;hterm&lt;/a&gt;, the xterm-compatible terminal emulator. A terminal emulator itself didn&amp;#8217;t help me though. I need to have it hosted and hooked into a server somewhere. Enter &lt;a class="reference external" href="https://github.com/krishnasrinivas/wetty"&gt;wetty&lt;/a&gt;, the full bound&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;So now that I had a terminal as a service, I still needed to work with my office&amp;#8217;s firewall. Luckily for me, I have this blog. Or more specifically, I have the comments of the blog that I&amp;#8217;m hosting myself using nginx. Using a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt; feature in nginx, I was able to link up my new &amp;#8216;terminal as a service&amp;#8217; to the ip address of my blog comments which has already been white listed in my organizations&amp;nbsp;firewall.&lt;/p&gt;
&lt;p&gt;Sweet. My organization gets a much more motivated/attentive employee during lull periods and I get to be more productive.&amp;nbsp;Win-win.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Dealing with Deeply Nested Data Structures</title><link href="https://benhoff.net/interactive-debugging-methods.html" rel="alternate"></link><published>2017-10-05T10:24:00-05:00</published><updated>2017-10-05T10:24:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-05:/interactive-debugging-methods.html</id><summary type="html">&lt;p class="first last"&gt;Showcasing a neat way to explore deeply nested data&amp;nbsp;structures&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Working with deeply nested data structures is a pain. Sometimes the easiest way to figure out the control structure to get the data that you want is to play around with the data the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;. My problem is comes from an &lt;span class="caps"&gt;API&lt;/span&gt;, it&amp;#8217;s a pain to figure out how to quickly evaluate the structure, make lasting changes to the script, and then jump back into figuring out the structure. In the past, I&amp;#8217;ve sucked it up and used the &lt;span class="caps"&gt;REPL&lt;/span&gt;, I&amp;#8217;ve written scripts and eval&amp;#8217;d integrated the data one change at a time using &lt;cite&gt;print&lt;/cite&gt;, and occasionally, I&amp;#8217;ll use jupyter-notebook. None of these solutions seemed to be very good&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I still haven&amp;#8217;t figured out a great way, but yesterday when working with json data from Reddit, the thought occurred to me that I might be able to jump straight into the &lt;span class="caps"&gt;REPL&lt;/span&gt; and just pass in the scope that I was working in. I&amp;#8217;d seen this done in the &lt;a class="reference external" href="https://github.com/gawel/irc3"&gt;irc3&lt;/a&gt; code, but I couldn&amp;#8217;t figure out how that would be useful at the high level that it was done at (basically interrogating the final &lt;cite&gt;bot&lt;/cite&gt; instance).&lt;/p&gt;
&lt;p&gt;Sure enough, you can definitely do it. Using the &lt;cite&gt;interact&lt;/cite&gt; method from the &lt;cite&gt;code&lt;/cite&gt; module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;code&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interact&lt;/span&gt;


&lt;span class="c1"&gt;# some expensive calls here to get....&lt;/span&gt;
&lt;span class="c1"&gt;# ...a deeply nested data structures&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{}],&lt;/span&gt; &lt;span class="p"&gt;[{},&lt;/span&gt; &lt;span class="p"&gt;{}],&lt;/span&gt; &lt;span class="p"&gt;[{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{}]]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;deeper_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dropping into the &lt;span class="caps"&gt;REPL&lt;/span&gt; like this gives me the ability to query &lt;cite&gt;deeper_value&lt;/cite&gt; interactively. This is often useful when dealing with &lt;span class="caps"&gt;JSON&lt;/span&gt; to figure out what keys are&amp;nbsp;available.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Creating a Bot that Quotes Pop Culture in Context</title><link href="https://benhoff.net/movie-quotes-in-context.html" rel="alternate"></link><published>2017-10-04T06:15:00-05:00</published><updated>2017-10-04T06:15:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-10-04:/movie-quotes-in-context.html</id><summary type="html">&lt;p class="first last"&gt;Working with Reddit comments and machine learning to get movie quote&amp;nbsp;context&lt;/p&gt;
</summary><content type="html">&lt;p&gt;So I&amp;#8217;m interested in creating a bot that could quote movie quotes back to your in a context that makes sense. I don&amp;#8217;t know how your conversations with your buddies go, but 70% of our everyday conversation is quoting things in new and different contexts, so I was interested to see if I could collect enough data to do this with some common&amp;nbsp;quotes.&lt;/p&gt;
&lt;p&gt;The first part of any good machine learning project is to collect data. I read &lt;a class="reference external" href="http://www.zmescience.com/science/reddit-supercomp-59815/"&gt;that OpenAI was using Reddit comments&lt;/a&gt; to learn language, so I figured I&amp;#8217;d use Reddit as a source. Live data seemed to be the most interesting way to pull data&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;The problem is that I&amp;#8217;ve vastly overestimated (apparently) how much people quote famous movie quotes. I left the program running overnight and instead of having 100&amp;#8217;s of matches, I only had one. So I&amp;#8217;ll have to figure out a different way to get data&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;From a technology standpoint, this was a relatively easy problem to solve. I&amp;#8217;m using &lt;a class="reference external" href="https://praw.readthedocs.io/en/latest/"&gt;&lt;span class="caps"&gt;PRAW&lt;/span&gt;&lt;/a&gt;, the Python Reddit &lt;span class="caps"&gt;API&lt;/span&gt; wrapper to get comments out. I wanted some flexibility for spelling, so I ended up using the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein algorithim&lt;/a&gt; from the &lt;a class="reference external" href="https://github.com/ztane/python-Levenshtein/"&gt;python-Levenshtien&lt;/a&gt; package. There&amp;#8217;s probably a better algo to do this, see &lt;a class="reference external" href="https://stackoverflow.com/questions/3338889/how-to-find-similar-results-and-sort-by-similarity"&gt;this stackoverflow post&lt;/a&gt; about that issue, but Levenshtien was good enough for a proof of&amp;nbsp;concept.&lt;/p&gt;
&lt;p&gt;The plan was to grab all of the parent comment&amp;#8217;s text if there was a match that was good close to any of the my movie quotes. But like I said, there&amp;#8217;s not enough data being returned from grabbing live comments to make this&amp;nbsp;feasible.&lt;/p&gt;
&lt;p&gt;I ran this in tmux on a digital ocean instance I have running for 12 hours. You could also have this write to a file as well. I turned off the similarity matching and have just been watching the raw text come in while I write this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Man, that &amp;#8216;Remind me!&amp;#8217; bot is&amp;nbsp;popular.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;praw&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Levenshtein&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;client_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# quotes is a list of string&lt;/span&gt;
&lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;USER_AGENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Movie Quote Bot by /u/beohoff&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reddit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;praw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reddit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;USER_AGENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greatest_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;greatest_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;least_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;least_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote_len&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subreddit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AskReddit+movies+funny+pics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greatest_length&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;len_text&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;least_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;greatest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;best_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Guess it&amp;#8217;s back to the drawing board for how to get enough data to create a bot that can respond in context with movie&amp;nbsp;quotes.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Setup Mailgun with Google Domain</title><link href="https://benhoff.net/setup-mailgun-with-google-domain.html" rel="alternate"></link><published>2017-07-05T16:24:00-05:00</published><updated>2017-07-05T16:24:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-05:/setup-mailgun-with-google-domain.html</id><summary type="html">&lt;p class="first last"&gt;Setting up the &lt;span class="caps"&gt;DNS&lt;/span&gt; configuration of Mailgun for Google&amp;nbsp;Domain&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Right, let&amp;#8217;s setup Mailgun. I&amp;#8217;m using Mailgun for my Discourse&amp;nbsp;install.&lt;/p&gt;
&lt;p&gt;The first step is to add your&amp;nbsp;domain.&lt;/p&gt;
&lt;p&gt;Mailgun is going to recommend that you use a subdomain, such as &lt;em&gt;mg.mydomain.com&lt;/em&gt;
Whether you want to do that or not is up to you, the steps will be similar. I&amp;#8217;m not going to. So for the sake of argument here, the domain that we are setting up is &lt;em&gt;mydomain.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mailgun is going to give you 4 steps. We will need to go &lt;a class="reference external" href="https://domains.google/#/"&gt;Google Domains&lt;/a&gt;. Click the &lt;em&gt;Manage My Domains&lt;/em&gt;, and then click the &lt;em&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/em&gt; button on the domain of&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;re there, scroll all the way down to the section that is titled &lt;em&gt;Custom resource records&lt;/em&gt;. It&amp;#8217;ll look something like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/google-domain-1.png" style="width: 400px; height: 100px;" /&gt;
&lt;p&gt;That accomplishes Step 1. &lt;em&gt;Go To Your &lt;span class="caps"&gt;DNS&lt;/span&gt; Provider&lt;/em&gt; from the 4 step process in&amp;nbsp;Mailgun.&lt;/p&gt;
&lt;p&gt;Under Step 2, &lt;em&gt;Add &lt;span class="caps"&gt;DNS&lt;/span&gt; Records For Sending&lt;/em&gt; on the &lt;strong&gt;Mailgun&lt;/strong&gt; site, there are three resources we need to add: &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TXT&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt;, and a second &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s add the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TXT&lt;/span&gt;&lt;/tt&gt; first.&lt;/p&gt;
&lt;p&gt;The top bar that is slightly grayed out with a blue button &amp;#8220;Add&amp;#8221; button on the far right is the interface that we&amp;#8217;ll be using to add these documents. If you have a subdomain, (e.g. &amp;#8220;mg.mydomain.com&amp;#8221;), the subdomain will go in the far left &amp;#8220;Name&amp;#8221; column, otherwise leave it blank. The &amp;#8220;Type&amp;#8221; drop down menu (second column from the left), we&amp;#8217;ll change from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;TXT&lt;/span&gt;&amp;#8221;. You can leave the &amp;#8220;&lt;span class="caps"&gt;TTL&lt;/span&gt;&amp;#8221; column  as is. In the &amp;#8220;Data&amp;#8221; column, we&amp;#8217;ll put in the &lt;span class="caps"&gt;SPF&lt;/span&gt; value &amp;#8220;v=spf1 include:mailgun.org ~all&amp;#8221;. Hit Add, and you should see the table update below the top&amp;nbsp;bar.&lt;/p&gt;
&lt;p&gt;Next, we&amp;#8217;ll add in the &lt;span class="caps"&gt;DKIM&lt;/span&gt;, or Domain Key. We&amp;#8217;ll follow the same procedure, although this time you&amp;#8217;ll need to add in the Hostname that Mailgun specifies. Change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;TXT&lt;/span&gt;&amp;#8221; and paste the value associated with the domain key into the &amp;#8220;Data&amp;#8221; column (should be in the form of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k=rsa;p={a&lt;/span&gt; bunch of letters}&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Next we&amp;#8217;ll add in the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/tt&gt; records.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll follow the same drill, subdomain (if you have one) in the far left, change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;MX&lt;/span&gt;&amp;#8221; and then paste the &lt;tt class="docutils literal"&gt;mxa.mailgun.org.&lt;/tt&gt; in the. You can either hit the plus sign on the right hand side of the &amp;#8220;Data&amp;#8221; column, or hit &amp;#8220;Add&amp;#8221; and then scroll down to the entry and click the &amp;#8220;Edit&amp;#8221; button. As a forewarning, Google will automatically add the number 10 to your record so &lt;tt class="docutils literal"&gt;mxa.mailgun.org.&lt;/tt&gt; will change to &lt;tt class="docutils literal"&gt;10 mxa.mailgun.org.&lt;/tt&gt;. Totally legit, don&amp;#8217;t&amp;nbsp;panic.&lt;/p&gt;
&lt;p&gt;Add in the second &amp;#8220;&lt;span class="caps"&gt;MX&lt;/span&gt;&amp;#8221; record &lt;tt class="docutils literal"&gt;mxb.mailgun.org.&lt;/tt&gt; and &amp;#8220;Add&amp;#8221; or save the&amp;nbsp;record.&lt;/p&gt;
&lt;p&gt;Last, according to Step 3) we need to Add &lt;span class="caps"&gt;DNS&lt;/span&gt; Records for&amp;nbsp;Tracking.&lt;/p&gt;
&lt;p&gt;Copy the Hostname that Mailgun provides under Step 3, change the &amp;#8220;Type&amp;#8221; from &amp;#8220;A&amp;#8221; to &amp;#8220;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&amp;#8221; and enter in the value of &lt;tt class="docutils literal"&gt;mailgun.org&lt;/tt&gt; into the &amp;#8220;Data&amp;#8221; column. Click&amp;nbsp;add.&lt;/p&gt;
&lt;p&gt;Step 4 is wait for your domain to verify. In my experience, it was almost instantaneous with&amp;nbsp;Google.&lt;/p&gt;
&lt;p&gt;In the end it should look something (although not exactly) like&amp;nbsp;this.&lt;/p&gt;
&lt;img alt="" src="https://benhoff.net/images/google-domain-2.png" style="width: 600px; height: 424px;" /&gt;
</content><category term="Random"></category></entry><entry><title>Vexbot State of the Union</title><link href="https://benhoff.net/vexbot-state-of-the-union.html" rel="alternate"></link><published>2017-07-01T16:30:00-05:00</published><updated>2017-07-01T16:30:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-07-01:/vexbot-state-of-the-union.html</id><summary type="html">&lt;p&gt;All right, let&amp;#8217;s talk about &lt;a class="reference external" href="https://github.com/benhoff/vexbot"&gt;Vexbot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot was created to scratch a very specific itch, conglomerating multiple chat sources into one place. No other bot (to my knowledge) can do this &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot does this by launching a subprocess for each chat provider (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Youtube, etc.) and using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s talk about &lt;a class="reference external" href="https://github.com/benhoff/vexbot"&gt;Vexbot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot was created to scratch a very specific itch, conglomerating multiple chat sources into one place. No other bot (to my knowledge) can do this &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vexbot does this by launching a subprocess for each chat provider (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Youtube, etc.) and using messaging (via &lt;a class="reference external" href="http://zeromq.org/"&gt;zmq&lt;/a&gt;) to communicate between them all. The &lt;span class="caps"&gt;GUI&lt;/span&gt; application, &lt;a class="reference external" href="https://github.com/benhoff/CHATIMUSMAXIMUS"&gt;chatimusmaximus&lt;/a&gt; provides the user interface so that I could see all of the chat streams in one central&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Vexbot has some simple chat processing, including direct string matching, and some natural language processing using the bag of words method to guess intent. These pieces are significantly underdeveloped. The reason that these important pieces are underdeveloped is because a large amount of recent developer time has has been spent devoted to two important pieces: settings and process management &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For settings management, I was originally using &lt;a class="reference external" href="http://www.yaml.org/start.html"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt; to manage all the settings. I really liked this approach as it allowed me to leave comments in the configuration file for my users. For a simple stationary setup, this would work well. However, for changing values programmatically, the limitations of this system were quickly apparent. I wanted to create a quick setup feature where the setup could be programmed from the command line, likely using a Text User Interface (&lt;span class="caps"&gt;TUI&lt;/span&gt;). &lt;span class="caps"&gt;YAML&lt;/span&gt; files aren&amp;#8217;t the best format for doing this,&amp;nbsp;frankly.&lt;/p&gt;
&lt;p&gt;I started exploring &lt;a class="reference external" href="https://www.sqlalchemy.org/"&gt;SQLALchemy&lt;/a&gt; for this purpose, but have yet to finish up an implementation that I&amp;#8217;m happy with. The current idea is that more &amp;#8220;dynamic&amp;#8221; services (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;) will get their own table for settings. Other, more static services will use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/INI_file"&gt;&lt;span class="caps"&gt;INI&lt;/span&gt;&lt;/a&gt; format. The python standard library &lt;a class="reference external" href="https://docs.python.org/3/library/configparser.html"&gt;configparser&lt;/a&gt; library handles the &lt;span class="caps"&gt;INI&lt;/span&gt; format nicely, it&amp;#8217;s easy enough to write out programmatically, and common to rewrite using a text&amp;nbsp;editor.&lt;/p&gt;
&lt;p&gt;So now I&amp;#8217;ve got an &lt;span class="caps"&gt;SQL&lt;/span&gt; database and a configuration file that I need to unify into one easy to use &lt;span class="caps"&gt;API&lt;/span&gt;. I also need to settle on schema that I like. It&amp;#8217;ll take work, but I&amp;#8217;m happy enough with the&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;The thing I&amp;#8217;m not happy about is the process management&amp;nbsp;piece.&lt;/p&gt;
&lt;p&gt;Right not the process management is done in python, using the &lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess&lt;/a&gt; module. And I&amp;#8217;m really not happy about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The point of Vexbot is not to duplicate any functionality that I have to. And man, have you ever noticed how good operating systems are at process management? Problem being that operating systems are hilariously un-cross&amp;nbsp;platform.&lt;/p&gt;
&lt;p&gt;I would probably double down and use systemd, but it forces me to bump up to the system level, instead of staying in userland. It&amp;#8217;s an unsolved issue. For now, I&amp;#8217;ll stick with using as much as the subprocess module as possible. Start, stop, kill, restart, update processes. The whole&amp;nbsp;shebang.&lt;/p&gt;
&lt;p&gt;Once the settings and the process management piece is taken care of, I&amp;#8217;ll get back to the natural language processing and expanding the&amp;nbsp;plugins.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The next closest well supported piece of software that I could find in Python was &lt;a class="reference external" href="https://github.com/errbotio/errbot"&gt;errbot&lt;/a&gt;. Errbot had some limitations though, mainly only allowing a single chat provider at a time. Errbot does allow one thing that Vexbot does not, a unified &lt;span class="caps"&gt;API&lt;/span&gt; for chat related programming regardless of backend.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It should be noted that the inital push was to get simple one-way text communication working between the various supported text services. Two way communication, or in-service commands haven&amp;#8217;t been, and continue to not be, a priority.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Random"></category></entry><entry><title>Keeping Track of Past Research</title><link href="https://benhoff.net/keeping-track-of-past-research.html" rel="alternate"></link><published>2017-06-27T17:07:00-05:00</published><updated>2017-06-27T17:07:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-27:/keeping-track-of-past-research.html</id><summary type="html">&lt;p class="first last"&gt;Reviewing multiple methods of keeping track of past&amp;nbsp;research&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve got a very specific&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;While I was doing research as part of my &lt;a class="reference external" href="https://www.packtpub.com/big-data-and-business-intelligence/learning-python-data-analysis-video"&gt;Learning Python Data Analysis&lt;/a&gt; series, I stumbled across a slideshare that showed the different types of analysis that you can do using Twitter data. I think the author ended up deep diving into building a network diagram showing the different connections between tweets. I want to deep dive into a different aspect of Twitter data analysis, following on the trend of doing live analysis that I did in my aforementioned video series&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;My problem is that I can&amp;#8217;t find that&amp;nbsp;slideshare.&lt;/p&gt;
&lt;p&gt;Now I admittedly have done very little research to re-find it. I actually don&amp;#8217;t feel like doing any research though. I would like for it to be served to me on a silver platter, since I already spent probably 10+ hours Google&amp;nbsp;searching.&lt;/p&gt;
&lt;p&gt;So I went looking for a better&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a couple of different ways I&amp;#8217;ve&amp;nbsp;found.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mind&amp;nbsp;maps&lt;/li&gt;
&lt;li&gt;Note&amp;nbsp;cards&lt;/li&gt;
&lt;li&gt;Wiki&amp;#8217;s&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="mind-maps"&gt;
&lt;h2&gt;Mind&amp;nbsp;Maps&lt;/h2&gt;
&lt;p&gt;Mind maps work by showing the connections between different&amp;nbsp;pieces.&lt;/p&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/1/1a/Tennis-mindmap.png" style="width: 400px; height: 282px;" /&gt;
&lt;p&gt;I&amp;#8217;ve been aware of mind maps before, but I was recently reminded of them by an interactive mind map I saw on Github, promising/labeled &amp;#8220;Learn Anything&amp;#8221;. Here&amp;#8217;s the &lt;a class="reference external" href="https://github.com/nikitavoloboev/learn-anything"&gt;repo&lt;/a&gt; and here&amp;#8217;s the &lt;a class="reference external" href="https://learn-anything.xyz/"&gt;website&lt;/a&gt; if you want to take a&amp;nbsp;look.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be upfront, I don&amp;#8217;t really see the use in mind maps&amp;#8230; or at least not software generated ones. The Learn Anything site seems to be more a link map, which I can kind of buy for usefulness?&amp;nbsp;Kinda?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="note-cards"&gt;
&lt;h2&gt;Note&amp;nbsp;Cards&lt;/h2&gt;
&lt;p&gt;This is a method I was thought while I was in school, and is apparently still in use today. The basic gist is to record the idea or information along with the original source on note cards. So you might pull the idea of &amp;#8220;Elephants can hear in the infrasonic region&amp;#8221; out of a certain book. The useful point of note cards is not to record the idea, but the actual source. That way, when you were writing a research paper you could form a coherent paper/thought process without worrying about keeping track of the sources, as they were a standalone&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;Microsoft Word has a version of this feature that I have [ab]used to write reports before. There are also standalone products that do a version of this as well. The challenge is that webpages, unlike books, do not fit well within this format. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Link_rot"&gt;Link rot&lt;/a&gt; is also a concern with this&amp;nbsp;method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wiki-s"&gt;
&lt;h2&gt;Wiki&amp;#8217;s&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been interested in the idea of creating wiki&amp;#8217;s for a long time. My interests are diverse, and the idea of hooking a wiki site up to a search engine is very, very appealing. &lt;a class="reference external" href="http://calnewport.com/blog/2009/05/11/how-to-build-a-paper-research-wiki/"&gt;This Blog post&lt;/a&gt; explores in depth a particular research methodology the author recommends as key to enabling his&amp;nbsp;research.&lt;/p&gt;
&lt;p&gt;However, according to Wikipedia, a wiki is a website where users collaboratively edit articles. In this case, keeping track of individual lines of research isn&amp;#8217;t really a collaborative effort. Wikipedia also mentions that wiki&amp;#8217;s are basically Content Management Systems (&lt;span class="caps"&gt;CMS&lt;/span&gt;&amp;#8217;s), which is a pretty well worn software model. It would likely be possible to explore a open source &lt;span class="caps"&gt;CMS&lt;/span&gt; for this solution. Or you know, maybe a&amp;nbsp;blog&amp;#8230;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blogs"&gt;
&lt;h2&gt;Blogs&lt;/h2&gt;
&lt;p&gt;Blogs at the end of the day are just content and can say anything. One of my favorite posts so far has been the &lt;a class="reference external" href="https://benhoff.net/flashing-beaglebone.rst"&gt;Beaglebone Black&lt;/a&gt; post, where I walked through the steps and frustrations of flashing a Beaglebone black. While I was originally trying to install OpenVPN on the Beaglebone and ended up not doing that, the post serves as a reference point when I (invariably) reflash another one. But I&amp;#8217;ve got some interesting tidbits and posts that should save me some time&amp;#8230; next&amp;nbsp;time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing&amp;nbsp;Thoughts&lt;/h2&gt;
&lt;p&gt;The truth of the matter is there&amp;#8217;s likely no single model or silver bullet software that is going to make this easy for me. My use case falls somewhere between &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Knowledge_transfer"&gt;Knowledge Transfer&lt;/a&gt; and individual&amp;nbsp;research.&lt;/p&gt;
&lt;p&gt;Committing to a research methodology or note taking process would be the main piece. Since I&amp;#8217;ve enjoyed writing up blog posts and linking them to death with outside sources, I&amp;#8217;ll likely keep that approach until further&amp;nbsp;notice.&lt;/p&gt;
&lt;p&gt;On the software side, I would like to figure out a way to keep track of interesting links and download/index the page contents to stave off the issues associated with link rot. Hooking this up to a search engine, (likely elastic search) combined with the aforementioned blog posts I and my video series transcript would scratch the 80% solution. If you know of an easy way to do that, drop me a&amp;nbsp;line.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Random"></category></entry><entry><title>Types of Programs</title><link href="https://benhoff.net/types-of-programs.html" rel="alternate"></link><published>2017-06-17T22:01:00-05:00</published><updated>2017-06-17T22:01:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-17:/types-of-programs.html</id><summary type="html">&lt;p class="first last"&gt;Experienced programmers know one thing beginner programmers don&amp;#8217;t: types of&amp;nbsp;programs.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve had a lot of people ask my how to learn how to&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;And my favorite analogy for that, is that learning programming is a lot like learning carpentry. No one really asks how you become a carpenter. They just go off and build things. Tables, chairs, shelves,&amp;nbsp;boxes.&lt;/p&gt;
&lt;p&gt;Programming is the same way. You should just go off and build things. However, you&amp;#8217;re not sitting on a desktop application right now, or eating off a command line tool everyday. Programming doesn&amp;#8217;t have simple real life analogies that you can figure out how to build. And it&amp;#8217;s also hard to see how programming things are&amp;nbsp;constructed.&lt;/p&gt;
&lt;p&gt;So when you tell people to go off and build things, they&amp;#8217;re not going to know what to build. How do you Google something that you don&amp;#8217;t even know anything&amp;nbsp;about?&lt;/p&gt;
&lt;p&gt;So during this post, we&amp;#8217;re going to go over some of the major client-side types of applications you can build. Or to go back to the earlier carpenter analogy&amp;#8230; we&amp;#8217;re going to talk about some of the furniture that you can build that you interact with on a daily basis. The programming desks and chairs, if you&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Up front disclaimer, the libraries I&amp;#8217;m going to discuss are all Python libraries. However, if you&amp;#8217;re programming in any other language, you should be able to Google &lt;tt class="docutils literal"&gt;java tui library&lt;/tt&gt; for example and come up with similar libraries in your preferred&amp;nbsp;language.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command-line-interfaces" id="id1"&gt;Command Line&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#terminal-user-interfaces" id="id2"&gt;Terminal User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#graphical-user-interfaces" id="id3"&gt;Graphical User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#web-pages" id="id4"&gt;Web&amp;nbsp;Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#knowledge-application" id="id5"&gt;Knowledge&amp;nbsp;Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Command Line&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First and most simple is the command line interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;). Love or hate them, a lot things in the programming world are &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s. These programs are run from the shell and usually have different arguments passed in. Very popular in system administration due to the lack of graphical user interfaces installed in&amp;nbsp;servers.&lt;/p&gt;
&lt;p&gt;Python is a great example of a command line interface&amp;nbsp;program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python runfile.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is the program being run, while &lt;tt class="docutils literal"&gt;runfile.py&lt;/tt&gt; is the argument being passed&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;I often use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; module flag in order to make virtual environments for&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv myvenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is again the program being run, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; &amp;#8220;module&amp;#8221; flag tells python that I want to run a particular python module (the &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module in this case), and the &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module takes another argument to specify what I want the directory for the virtual environment to be named (&lt;tt class="docutils literal"&gt;myvenv&lt;/tt&gt; in this&amp;nbsp;case).&lt;/p&gt;
&lt;p&gt;One of the more advanced command line (non-programming-related) programs I&amp;#8217;ve used is &lt;a class="reference external" href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic syntax for calling this program goes something like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; youtube-dl &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; URL &lt;span class="o"&gt;[&lt;/span&gt;URL...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several libraries in python exist to help you program a &lt;span class="caps"&gt;CLI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Probably the most beginner friendly one is &lt;a class="reference external" href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt;. However Python comes bundled with two in the standard library, including &lt;a class="reference external" href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; and &lt;a class="reference external" href="https://docs.python.org/3/library/getopt.html"&gt;getopt&lt;/a&gt;. I tend to use &lt;tt class="docutils literal"&gt;argparse&lt;/tt&gt; in my personal projects. Your mileage may&amp;nbsp;vary.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s are common for scripting&amp;nbsp;programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal-user-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Terminal User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Terminal User Interfaces (TUIs) really only got named that way after Graphical User Interfaces (GUIs) came into existence. These programs are run in the terminal and tend to take over and redraw the entire terminal. According to Wikipedia, TUIs display computer graphics in text form. I just tend to think of them as programs that can be run from, and take over, the&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;Probably the best know TUIs are famous text editors, including Vim and &lt;span class="caps"&gt;EMACS&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/8/8c/Vim-%28logiciel%29-console.png" style="width: 546px; height: 324px;" /&gt;
&lt;p&gt;Again, there are several libraries to help implement TUIs. The &lt;a class="reference external" href="https://docs.python.org/3/library/curses.html"&gt;curses&lt;/a&gt; library is probably the most well know library to create a &lt;span class="caps"&gt;TUI&lt;/span&gt;, although it is only available in linux. &lt;a class="reference external" href="https://github.com/urwid/urwid"&gt;urwid&lt;/a&gt; is a bit more fully featured library for &lt;span class="caps"&gt;TUI&lt;/span&gt;&amp;nbsp;creation.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;TUI&lt;/span&gt;&amp;#8217;s are probably less common, although I&amp;#8217;ve been interested in creating some for my own personal projects (not enough free time to grok the development process with &lt;tt class="docutils literal"&gt;urwid&lt;/tt&gt;). All of the goodness of a &lt;span class="caps"&gt;CLI&lt;/span&gt;, as you&amp;#8217;re still in the terminal, with a little bit more ease of use (man pages or help only get&amp;#8217;s you so&amp;nbsp;far).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="graphical-user-interfaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Graphical User&amp;nbsp;Interfaces&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;According to Wikipedia, Graphical User Interfaces (GUIs) are a type of interface that allows users to interact with electronic devices through graphical icons and visual indicators. If you figure out what that means, let me know. That aside, &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s are the bread and butter of computing. Your web browser is a &lt;span class="caps"&gt;GUI&lt;/span&gt;. Your games run in GUIs. If you&amp;#8217;ve ever used the Windows or Mac Operating Systems, the predominate way you interact with the computer is through the use of &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/en/5/54/Microsoft_Office_2016_Screenshots.png" style="width: 546px; height: 360px;" /&gt;
&lt;p class="caption"&gt;^ All&amp;nbsp;GUIs.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python has a host of libraries for building GUIs. There&amp;#8217;s the &lt;a class="reference external" href="https://www.gtk.org/A"&gt;&lt;span class="caps"&gt;GTK&lt;/span&gt;&lt;/a&gt; library. My personal favorite, the &lt;a class="reference external" href="https://www.qt.io/"&gt;Qt&lt;/a&gt; framework (especially the &lt;a class="reference external" href="https://riverbankcomputing.com/software/pyqt/intro"&gt;PyQt&lt;/a&gt; bindings of the Qt framework). The Python standard library also has &lt;a class="reference external" href="https://docs.python.org/3/library/tk.html"&gt;tkinter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GUIs are used to build just about anything, and most normal people would look at you funny if you told them a program needed to be run from the terminal. The only thing that has surpassed them in popularity has&amp;nbsp;been&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Web&amp;nbsp;Pages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You could argue this one, but the truth is a lot of applications today are created to be served as a web page. The web page has become a standard user interface&amp;nbsp;paradigm.&lt;/p&gt;
&lt;p&gt;The standard stack for a client side webpage uses html (words and format), &lt;span class="caps"&gt;CSS&lt;/span&gt; (styling), and JavaScript (dynamic&amp;nbsp;scripting).&lt;/p&gt;
&lt;p&gt;If you want to build something programmatic on a web page, you need to program in JavaScript. Or at least for the client (user facing) side. On the backside/server-side&amp;#8230; Different&amp;nbsp;story.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; or &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; are two web frameworks for python. &lt;tt class="docutils literal"&gt;Django&lt;/tt&gt; is a bit more full featured with database model helper classes built in, while &lt;tt class="docutils literal"&gt;flask&lt;/tt&gt;, as a micro framework, is much less&amp;nbsp;opinionated.&lt;/p&gt;
&lt;p&gt;I would recommend looking into a static site generator such as &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;pelican&lt;/a&gt; if you&amp;#8217;re looking at creating something that just needs to be&amp;nbsp;read.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; are also a great way to deliver content via the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;Web pages are a very common way to deliver an application experience. They are arguably the most cross-platform and consistent user&amp;nbsp;experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="knowledge-application"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Knowledge&amp;nbsp;Application&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So how does this information help you? We&amp;#8217;ve covered the major types of client-side interfaces. If you wanted some inspiration for projects, but want to minimize the user interface portions of your programming, I might suggest researching existing &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;#8217;s that sound interesting or implement your own. Want something a little bit more discoverable and easy to navigate, but still in the terminal (maybe a low usage application)? TUIs, my friend. Need to create something that others will use on the computer? Maybe get into some &lt;span class="caps"&gt;GUI&lt;/span&gt; programming. Bowing down to the overwhelming web pressure? Well go learn some JavaScript for your client-side needs. But if it&amp;#8217;s a back-end you need, maybe &lt;tt class="docutils literal"&gt;flask&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;django&lt;/tt&gt; can save&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;The point is to help provide a little bit of information into the terminology and types of programming applications, so that when you want to make your programming chair, you&amp;#8217;re a little more knowledgable about where to go&amp;nbsp;searching.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Random"></category></entry><entry><title>Software Engineering</title><link href="https://benhoff.net/on-software-engineering.html" rel="alternate"></link><published>2017-06-15T09:05:00-05:00</published><updated>2017-06-15T09:05:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-15:/on-software-engineering.html</id><summary type="html">&lt;p class="first last"&gt;Hiring differences between being a Software Engineer and Computer&amp;nbsp;Scientist&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The other day, I ran into the idea of &lt;a class="reference external" href="http://sijinjoseph.com/programmer-competency-matrix/"&gt;The Programmer Competency Matrix&lt;/a&gt;. Which as I scrolled through the various categories and read the various rows I realized: Wow. I am not very&amp;nbsp;competent.&lt;/p&gt;
&lt;p&gt;Except for Software&amp;nbsp;Engineering.&lt;/p&gt;
&lt;p&gt;I am level 3 in all categories of Software Engineering except for testing, where I&amp;#8217;m a solid two (&lt;span class="caps"&gt;UI&lt;/span&gt; testing would be new to me). I would probably be a Level 1 in all Computer Science&amp;nbsp;categories.&lt;/p&gt;
&lt;p&gt;And I&amp;#8217;m completely &lt;span class="caps"&gt;OK&lt;/span&gt; with&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had a lot of folks ask me while I was &lt;a class="reference external" href="https://www.youtube.com/channel/UChWbNrHQHvKK6paclLp7WYw"&gt;live streaming&lt;/a&gt; heavily how to get better at programming. And if this matrix is any indication, I&amp;#8217;m the wrong person to&amp;nbsp;ask.&lt;/p&gt;
&lt;p&gt;Now I think the question they were really asking is how do I feel more comfortable navigating my programming language&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt; or be better at integrating third party&amp;nbsp;libraries&amp;#8230;&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;if&lt;/em&gt; the question they were asking is how do I better prepare myself to get hired, I would respond with the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software&amp;nbsp;Engineering&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a (now) &lt;em&gt;working&lt;/em&gt; Mechanical Engineer, very little of my day job requires engineering. I&amp;#8217;m working in supplying spare parts, which is the perfect physical analogy to maintaining existing systems. My only job is to not break it and keep it running. The design engineering has already been&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;I would argue that most software jobs are similar. Keep the system running and don&amp;#8217;t break&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;And when you&amp;#8217;re trying to do that, documentation and process become the most important steps. What is this? Why did it break? When I fix it, will someone else understand what I did? Additional software engineering terms, how do I commit changes? Who approves them? What testing needs to be done? Or types of tests&amp;nbsp;written?&lt;/p&gt;
&lt;p&gt;These types of questions will take up more than binomial or Fibonacci heaps [data structures, level&amp;nbsp;3].&lt;/p&gt;
&lt;p&gt;What do you think about the debate of Software Engineering vs Computer Scientist? Let me know in the comments&amp;nbsp;below.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Flashing Beaglebone Black</title><link href="https://benhoff.net/flashing-beaglebone-black.html" rel="alternate"></link><published>2017-06-12T19:51:00-05:00</published><updated>2017-06-12T19:51:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-12:/flashing-beaglebone-black.html</id><summary type="html">&lt;p class="first last"&gt;Trails and tribulations of trying to bring a Beaglebone black up to the latest&amp;nbsp;kernel.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;All right, let&amp;#8217;s update a &lt;a class="reference external" href="https://beagleboard.org/black"&gt;beaglebone black&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I need to flash the&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;So &lt;a class="reference external" href="https://beagleboard.org/latest-images"&gt;downloading&lt;/a&gt; the latest image from the repository, I need to unpack the&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; unxz bone-debian-X.X-iot-armhf-YYYY-MM-DD-4gb.img.xz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, now I&amp;#8217;ve got the uncompressed&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lsblk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shows the &lt;span class="caps"&gt;SD&lt;/span&gt; card I&amp;#8217;ve just plugged in as&amp;nbsp;/dev/sdc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo mount /dev/sdc /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then let&amp;#8217;s write our&amp;nbsp;image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo dd if=bone-debian*.img of=/dev/sdc bs=512 status=progress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Believe me, that little &amp;#8216;status=progress&amp;#8217; bit is a life saver. Otherwise you have no idea how long it&amp;#8217;s going to take. I also don&amp;#8217;t know how to kill dd without pulling out the&amp;nbsp;drive.&lt;/p&gt;
&lt;p&gt;The last two sentences are&amp;nbsp;related.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m following &lt;a class="reference external" href="http://derekmolloy.ie/write-a-new-image-to-the-beaglebone-black/"&gt;this&lt;/a&gt; blog post by the way.
Since you&amp;#8217;re going to be awhile.
My image size was 4 gigabytes with a transfer speed of ~6&amp;nbsp;megabytes/second.&lt;/p&gt;
&lt;p&gt;And it died. 13 minutes of waiting&amp;#8230; Ok. Let&amp;#8217;s try again. (&lt;a class="reference external" href="http://guichaz.free.fr/iotop/"&gt;Iotop&lt;/a&gt; will show you if the copy is still&amp;nbsp;working)&lt;/p&gt;
&lt;p&gt;Died again. 3rd times the charm.
Nope. Ok on to something else. Normally I&amp;#8217;d just go get a new &lt;span class="caps"&gt;SD&lt;/span&gt; card, but I&amp;#8217;m transferring this through like 3 adapters and it&amp;#8217;s been known to give me issues in the&amp;nbsp;past.&lt;/p&gt;
&lt;p&gt;Stack Exchange to the rescue. According to &lt;a class="reference external" href="https://unix.stackexchange.com/questions/180330/resuming-a-dd-of-an-entire-disk"&gt;this post&lt;/a&gt; I should just be able to resume where I left off.&amp;nbsp;Neat.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll want to seek and skip. The output of should look something like&amp;nbsp;this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;6963200+0 records in&lt;/span&gt;
&lt;span class="go"&gt;6963200+0 records out&lt;/span&gt;
&lt;span class="go"&gt;3565158400 bytes (3.6 GB, 3.3 GiB) copied, 732.023 s, 4.9 MB/s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll want to use the records for the seek and skip variables referenced&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;However, after some serious heartache, it looks like my dd just didn&amp;#8217;t terminate correctly, and everything was&amp;nbsp;written.&lt;/p&gt;
&lt;p&gt;So now, holding down the boot button, waiting for the buttons to start flashing the heartbeat pattern, and it looks like we&amp;#8217;re in&amp;nbsp;business.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh debian@192.168.7.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The password was in the banner for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Now on to &lt;a class="reference external" href="http://kacangbawang.com/beagleboneblack-revc-debloat-part-1/"&gt;demucking&lt;/a&gt; the&amp;nbsp;install.&lt;/p&gt;
</content><category term="Random"></category></entry><entry><title>Fixing My Issue With Github Stars</title><link href="https://benhoff.net/remembering-github-stars.html" rel="alternate"></link><published>2017-06-09T08:11:00-05:00</published><updated>2017-06-09T08:11:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-09:/remembering-github-stars.html</id><summary type="html">&lt;p class="first last"&gt;How I fixed a long term issue with how I star repositories on&amp;nbsp;Github&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I’ve got this weird&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;I don’t remember why I’ve starred the things I’ve starred on Github. It’s gotten so bad in fact, that I’ll often be browsing an interesting Github repo on a topic I’m interested in, go to bookmark it, and realize that I already&amp;nbsp;have.&lt;/p&gt;
&lt;p&gt;Doh!&lt;/p&gt;
&lt;p&gt;The real issue is that the reason I bookmark repo’s is for a very specific purpose. For example, a lot of the bot code that I follow is because I’m interested in how different bots parse and handle incoming messages or&amp;nbsp;events.&lt;/p&gt;
&lt;p&gt;I mean, in my head, it’s probably something as simple as pushing it onto a queue and then using a worker thread to work through the tasks. But what if it’s&amp;nbsp;different?&lt;/p&gt;
&lt;p&gt;Part of the reason I started working on Vexbot was because I was interested in a universal interface to anything. I wanted to take and plug into random services (Youtube, Irc, etc) and have them all run through a common parsing/bot system. So far, I’ve created the only bot that I’ve seen that uses subproccesses for each individual&amp;nbsp;adapter.&lt;/p&gt;
&lt;p&gt;But I’m always curious about what others have done to tackle this problem, so I bookmark other bots to go check out how they do it.
Except I never do. And then browsing through my list of stars (which I rarely do) I can never remember why I bookmarked&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;So let’s fix&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I’ll create a github repo targeted at remembering why I starred the things I stared. By using a Readme file, I’ll only have to visit the main repo page. Plus very thing is version controlled and nice. Something that would be nice would be to create a bot that periodically polls my starred list and creates an issue or a pull request so that I don’t get lazy, but let’s not get ahead of&amp;nbsp;ourselves.&lt;/p&gt;
&lt;p&gt;So hold my beer. Here I&amp;nbsp;go.&lt;/p&gt;
</content><category term="random"></category></entry><entry><title>Bash String Subsitution</title><link href="https://benhoff.net/bash-string-substitution.html" rel="alternate"></link><published>2017-06-08T13:19:00-05:00</published><updated>2017-06-08T13:19:00-05:00</updated><author><name>Ben Hoff</name></author><id>tag:benhoff.net,2017-06-08:/bash-string-substitution.html</id><summary type="html">&lt;p class="first last"&gt;Learning how to do string substitution in bash&amp;nbsp;commands&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A little personal confession: I&amp;#8217;m really bad at the command line. And by bad, I mean willfully ignorant. I often know there&amp;#8217;s a better way to work in the command line and I often don&amp;#8217;t learn how to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For example, one of the little tricks that has saved me a lot of time is the use of the double exclamation marks to redo and edit a&amp;nbsp;command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pacman -S interesting-package
&lt;span class="go"&gt;error: you cannot perform this operation unless you are root&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; sudo !!
&lt;span class="go"&gt;sudo pacman -S interesting-package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the double exclamation marks will save you from retyping all of the things when you forget something simple like a sudo. It&amp;#8217;s saved my sanity many a&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;One example of my willful ignorance, is with misspelling things on the command&amp;nbsp;line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git comit -m &lt;span class="s1"&gt;&amp;#39;really long commit message&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;git: &amp;#39;comit&amp;#39; is not a git command. See &amp;#39;git --help&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;The most similar command is&lt;/span&gt;
&lt;span class="go"&gt;        commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dammit. Up until today, I&amp;#8217;ve pressed the up arrow to bring the command back up, then used the left arrow to navigate all the way back to my mistake before fixing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The crazy thing is I know there&amp;#8217;s a way to do a simple string substitution. I&amp;#8217;ve just been too lazy to look it&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Until today. Today, with the use of Google, I become a power&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;As a vim user this is the syntax that I&amp;#8217;ll&amp;nbsp;remember.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; !!:s/comit/commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, if you&amp;#8217;ve invested in a saner text editor, a simpler syntax&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ^comit^commit^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if only I could remember the way to navigate to the beginning of a command line (&lt;cite&gt;Ctl-e?&lt;/cite&gt;&amp;#8230;. &lt;cite&gt;Ctl-a?&lt;/cite&gt;)&lt;/p&gt;
&lt;p&gt;or learn how to use my bash&amp;nbsp;history&amp;#8230;.&lt;/p&gt;
&lt;p&gt;Well there&amp;#8217;s always&amp;nbsp;tomorrow.&lt;/p&gt;
</content><category term="Random"></category></entry></feed>